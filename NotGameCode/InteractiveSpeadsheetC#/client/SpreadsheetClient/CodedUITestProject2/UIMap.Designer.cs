// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestEntryAndNav1 - Use 'TestEntryAndNav1Params' to pass parameters into this method.
        /// </summary>
        public void TestEntryAndNav1()
        {
            #region Variable Declarations
            //WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            //WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            ApplicationUnderTest uIOpenButton = ApplicationUnderTest.Launch(
                @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe");
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            //Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(40, 33));

            // Click '&Open' button
            //Mouse.Click(uIOpenButton, new Point(62, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(93, 38));

            // Type '1' in text box
            uIItemEdit.Text = this.TestEntryAndNav1Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNav1Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(93, 39));
        }
        
        /// <summary>
        /// AssertA1 - Use 'AssertA1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA1()
        {
            #region Variable Declarations
            WinText uIValue1Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue1Text;
            #endregion

            // Verify that the 'ControlType' property of 'Value: 1' label equals 'Value: 1'
            string a = this.AssertA1ExpectedValues.UIValue1TextControlType;
            string b = uIValue1Text.Name;
            Assert.AreEqual(a, b, "A1 != 1");
        }
        
        /// <summary>
        /// TestEntryAndNav2 - Use 'TestEntryAndNav2Params' to pass parameters into this method.
        /// </summary>
        public void TestEntryAndNav2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(44, 58));

            // Type '10.01' in text box
            uIItemEdit.Text = this.TestEntryAndNav2Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNav2Params.UIItemEditSendKeys, ModifierKeys.None);

            // Type '{Right}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNav2Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(44, 59));
        }
        
        /// <summary>
        /// AssertA2 - Use 'AssertA2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA2()
        {
            #region Variable Declarations
            WinText uIValue1001Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue1001Text;
            #endregion

            // Verify that the 'ControlType' property of 'Value: 10.01' label equals 'Value: 10.01'
            string a = this.AssertA2ExpectedValues.UIValue1001TextControlType;
            string b = uIValue1001Text.Name;
            Assert.AreEqual(a, b, "A2 != 10.01");
        }
        
        /// <summary>
        /// TestEntryAndNav3 - Use 'TestEntryAndNav3Params' to pass parameters into this method.
        /// </summary>
        public void TestEntryAndNav3()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIToolStrip1Edit = this.UISpreadsheetWindow.UIItemWindow1.UIToolStrip1Edit;
            #endregion

            // Type '' in text box
            uIItemEdit.Text = this.TestEntryAndNav3Params.UIItemEditText;

            // Type '{Tab}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNav3Params.UIItemEditSendKeys, ModifierKeys.None);

            // Type '{Left}' in 'toolStrip1' text box
            Keyboard.SendKeys(uIToolStrip1Edit, this.TestEntryAndNav3Params.UIToolStrip1EditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertPositionIsA2 - Use 'AssertPositionIsA2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertPositionIsA2()
        {
            #region Variable Declarations
            WinText uIA2Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIA2Text;
            #endregion

            // Verify that the 'Name' property of 'A2' label equals 'A2'
            string a = this.AssertPositionIsA2ExpectedValues.UIA2TextName;
            string b = uIA2Text.Name;
            Assert.AreEqual(a, b, "Failed assert we are focused on A2");
        }
        
        /// <summary>
        /// TestEntryAndNav4 - Use 'TestEntryAndNav4Params' to pass parameters into this method.
        /// </summary>
        public void TestEntryAndNav4()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNav4Params.UIItemEditSendKeys, ModifierKeys.None);

            // Type '=A1+A2' in text box
            uIItemEdit.Text = this.TestEntryAndNav4Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNav4Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(54, 78));
        }
        
        /// <summary>
        /// AssertA3Formula - Use 'AssertA3FormulaExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA3Formula()
        {
            #region Variable Declarations
            WinText uIValue1101Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue1101Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 11.01' label equals 'Value: 11.01'
            string a = this.AssertA3FormulaExpectedValues.UIValue1101TextName;
            string b = uIValue1101Text.Name;
            Assert.AreEqual(a, b, "Formula failed to evaluate in A3");
        }
        
        /// <summary>
        /// TestEntryAndNav5 - Use 'TestEntryAndNav5Params' to pass parameters into this method.
        /// </summary>
        public void TestEntryAndNav5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(153, 38));

            // Type 'Hello World!' in text box
            uIItemEdit.Text = this.TestEntryAndNav5Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNav5Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(162, 42));
        }
        
        /// <summary>
        /// AssertB2String - Use 'AssertB2StringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertB2String()
        {
            #region Variable Declarations
            WinText uIValueHelloWorldText = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValueHelloWorldText;
            #endregion

            // Verify that the 'Name' property of 'Value: Hello World!' label equals 'Value: Hello World!'
            string a = this.AssertB2StringExpectedValues.UIValueHelloWorldTextName;
            string b = uIValueHelloWorldText.Name;
            Assert.AreEqual(a, b, "B1 does not contain \"Hello World!\"");
        }
        
        /// <summary>
        /// TestEntryAndNavSave1 - Use 'TestEntryAndNavSave1Params' to pass parameters into this method.
        /// </summary>
        public void TestEntryAndNavSave1()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow.UISpreadsheetTitleBar;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(209, 17));

            // Type 'Control + s' in text box
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNavSave1Params.UIItemEditSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// TestSaveDialog1 - Use 'TestSaveDialog1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestSaveDialog1()
        {
            #region Variable Declarations
            WinTitleBar uISaveSpreadsheetAsTitleBar = this.UISaveSpreadsheetAsWindow.UISaveSpreadsheetAsTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Save Spreadsheet As' title bar equals 'Save Spreadsheet As'
            string a = this.TestSaveDialog1ExpectedValues.UISaveSpreadsheetAsTitleBarDisplayText;
            string b = uISaveSpreadsheetAsTitleBar.DisplayText;
            Assert.AreEqual(a, b, "Was not Save Dialog");
        }
        
        /// <summary>
        /// TestClose1 - Use 'TestClose1Params' to pass parameters into this method.
        /// </summary>
        public void TestClose1()
        {
            #region Variable Declarations
            WinComboBox uIFilenameComboBox = this.UISaveSpreadsheetAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveSpreadsheetAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Select 'test1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.TestClose1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(52, 11));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(54, 14));
        }
        
        /// <summary>
        /// Test1 - Use 'Test1Params' to pass parameters into this method.
        /// </summary>
        public void Test1()
        {
            #region Variable Declarations
            //WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            //WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            ApplicationUnderTest uIOpenButton = ApplicationUnderTest.Launch(
                @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe");
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            //Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(30, 28));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(84, 23));

            // Type 'Control + o' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test1Params.UIItemEditSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Assert1 - Use 'Assert1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert1()
        {
            #region Variable Declarations
            WinTitleBar uIOpenSpreadsheetTitleBar = this.UIOpenSpreadsheetWindow.UIOpenSpreadsheetTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Open Spreadsheet' title bar equals 'Open Spreadsheet'
            string a = this.Assert1ExpectedValues.UIOpenSpreadsheetTitleBarDisplayText;
            string b = uIOpenSpreadsheetTitleBar.DisplayText;
            Assert.AreEqual(a, b, "Not an Open file dialog");
        }
        
        /// <summary>
        /// Test2
        /// </summary>
        public void Test2()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIOpenSpreadsheetWindow.UICancelWindow.UICancelButton;
            WinMenuItem uIOpenCtrlOMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenCtrlOMenuItem;
            WinEdit uINameEdit = this.UIOpenSpreadsheetWindow.UIItemWindow.UITest1sprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenSpreadsheetWindow.UIOpenWindow.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(61, 18));

            // Click 'File' -> 'Open Ctrl+O' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(31, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(24, 10));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(42, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(57, 39));
        }
        
        /// <summary>
        /// Assert2 - Use 'Assert2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert2()
        {
            #region Variable Declarations
            WinText uIValue1Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue1Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 1' label equals 'Value: 1'
            string a = this.Assert2ExpectedValues.UIValue1TextName;
            string b = uIValue1Text.Name;
            Assert.AreEqual(a, b, "Value in A1 != 1");
        }
        
        /// <summary>
        /// Test3 - Use 'Test3Params' to pass parameters into this method.
        /// </summary>
        public void Test3()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click text box
            Mouse.Click(uIItemEdit, new Point(25, 10));

            // Type '{F2}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test3Params.UIItemEditSendKeys, ModifierKeys.None);

            // Type '{Left}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test3Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Type '21' in text box
            uIItemEdit.Text = this.Test3Params.UIItemEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(52, 59));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 39));
        }
        
        /// <summary>
        /// Assert3 - Use 'Assert3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert3()
        {
            #region Variable Declarations
            WinText uIValue21Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue21Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 21' label equals 'Value: 21'
            string a = this.Assert3ExpectedValues.UIValue21TextName;
            string b = uIValue21Text.Name;
            Assert.AreEqual(a, b, "Value in A1 != 21");
        }
        
        /// <summary>
        /// Test4 - Use 'Test4Params' to pass parameters into this method.
        /// </summary>
        public void Test4()
        {
            #region Variable Declarations
            //WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            //WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            //ApplicationUnderTest uIOpenButton = ApplicationUnderTest.Launch(
            //    @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe");
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            //Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(52, 19));

            // Click '&Open' button
            Mouse.Click(uIItemEdit, new Point(54, 15));

            // Type 'Control + n' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4Params.UIItemEditSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Test4B - Use 'Test4BParams' to pass parameters into this method.
        /// </summary>
        public void Test4B()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheetTitleBar = this.UISpreadsheetWindow1.UISpreadsheetTitleBar;
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UIItemWindow.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Spreadsheet' title bar
            Mouse.Click(uISpreadsheetTitleBar, new Point(164, 13));

            // Type '1' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys, ModifierKeys.None);

            // Type '2' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Type '3' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys2, ModifierKeys.None);

            // Type '4' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText3;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys3, ModifierKeys.None);

            // Type '5' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText4;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys4, ModifierKeys.None);

            // Type '6' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText5;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys5, ModifierKeys.None);

            // Type '7' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText6;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys6, ModifierKeys.None);

            // Type '8' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText7;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys7, ModifierKeys.None);

            // Type '9' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText8;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys8, ModifierKeys.None);

            // Type '10' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText9;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys9, ModifierKeys.None);

            // Type '11' in text box
            uIItemEdit.Text = this.Test4BParams.UIItemEditText10;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test4BParams.UIItemEditSendKeys10, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(55, 239));
        }
        
        /// <summary>
        /// Assert4 - Use 'Assert4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert4()
        {
            #region Variable Declarations
            WinText uIValue11Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValue11Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 11' label equals 'Value: 11'
            string a = this.Assert4ExpectedValues.UIValue11TextName;
            string b = uIValue11Text.Name;
            Assert.AreEqual(a, b, "Value in A11 != 11");
        }
        
        /// <summary>
        /// Test5
        /// </summary>
        public void Test5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(45, 56));
        }
        
        /// <summary>
        /// Assert5 - Use 'Assert5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert5()
        {
            #region Variable Declarations
            WinText uIValue2Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValue2Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 2' label equals 'Value: 2'
            string a = this.Assert5ExpectedValues.UIValue2TextName;
            string b = uIValue2Text.Name;
            Assert.AreEqual(a, b, "Value in A2 != 2");
        }
        
        /// <summary>
        /// Test6
        /// </summary>
        public void Test6()
        {
            #region Variable Declarations
            WinText uIToolStripButton1Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIToolStripButton1Text;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(10, 14));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(58, 238));
        }
        
        /// <summary>
        /// Assert6 - Use 'Assert6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert6()
        {
            #region Variable Declarations
            WinText uIValueText = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValueText;
            #endregion

            // Verify that the 'Name' property of 'Value:' label equals 'Value: '
            string a = this.Assert6ExpectedValues.UIValueTextName;
            string b = uIValueText.Name;
            Assert.AreEqual(a, b, "Value in A11 != \"\"");
        }
        
        /// <summary>
        /// Test7 - Use 'Test7Params' to pass parameters into this method.
        /// </summary>
        public void Test7()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UIItemWindow.UIItemEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Type 'Control + z' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test7Params.UIItemEditSendKeys, ModifierKeys.Control);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 219));
        }
        
        /// <summary>
        /// Assert7 - Use 'Assert7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert7()
        {
            #region Variable Declarations
            WinText uIValueText = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValueText;
            #endregion

            // Verify that the 'Name' property of 'Value:' label equals 'Value: '
            string a = this.Assert7ExpectedValues.UIValueTextName;
            string b = uIValueText.Name;
            Assert.AreEqual(a, b, "Value in A10 != \"\"");
        }
        
        /// <summary>
        /// Test8
        /// </summary>
        public void Test8()
        {
            #region Variable Declarations
            WinMenuItem uIUndoCtrlZMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIEditMenuItem.UIUndoCtrlZMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Edit' -> 'Undo (Ctrl+Z)' menu item
            Mouse.Click(uIUndoCtrlZMenuItem, new Point(32, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(88, 202));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIValueText = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValueText;
            #endregion

            // Verify that the 'Name' property of 'Value:' label equals 'Value: '
            string a = this.AssertMethod1ExpectedValues.UIValueTextName;
            string b = uIValueText.Name;
            Assert.AreEqual(a, b, "Value in A9 != \"\"");
        }
        
        /// <summary>
        /// Test9A
        /// </summary>
        public void Test9A()
        {
            #region Variable Declarations
            WinText uIToolStripButton1Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIToolStripButton1Text;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(12, 13));

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(12, 13));

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(12, 13));

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(12, 13));

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(12, 13));

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(12, 13));

            // Click 'toolStripButton1' label
            Mouse.Click(uIToolStripButton1Text, new Point(12, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(65, 58));
        }
        
        /// <summary>
        /// Assert9A - Use 'Assert9AExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert9A()
        {
            #region Variable Declarations
            WinText uIValueText = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValueText;
            #endregion

            // Verify that the 'Name' property of 'Value:' label equals 'Value: '
            Assert.AreEqual(this.Assert9AExpectedValues.UIValueTextName, uIValueText.Name, "Value in A2 != \"\"");
        }
        
        /// <summary>
        /// Assert9B - Use 'Assert9BExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert9B()
        {
            #region Variable Declarations
            WinMenuItem uIUndoCtrlZMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIEditMenuItem.UIUndoCtrlZMenuItem;
            #endregion

            // Verify that the 'Enabled' property of 'Edit' -> 'Undo (Ctrl+Z)' menu item equals 'False'
            Assert.AreEqual(this.Assert9BExpectedValues.UIUndoCtrlZMenuItemEnabled, uIUndoCtrlZMenuItem.Enabled, "Undo still enabled!");
        }
        
        /// <summary>
        /// Assert9C - Use 'Assert9CExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert9C()
        {
            #region Variable Declarations
            WinMenuItem uIRedoCtrlYMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIEditMenuItem.UIRedoCtrlYMenuItem;
            #endregion

            // Verify that the 'Enabled' property of 'Edit' -> 'Redo (Ctrl+Y)' menu item equals 'True'
            Assert.AreEqual(this.Assert9CExpectedValues.UIRedoCtrlYMenuItemEnabled, uIRedoCtrlYMenuItem.Enabled, "Redo is Disabled!");
        }
        
        /// <summary>
        /// Test10
        /// </summary>
        public void Test10()
        {
            #region Variable Declarations
            WinText uIToolStripButton2Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIToolStripButton2Text;
            #endregion

            // Click 'toolStripButton2' label
            Mouse.Click(uIToolStripButton2Text, new Point(13, 11));
        }
        
        /// <summary>
        /// Test10B
        /// </summary>
        public void Test10B()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(69, 61));
        }
        
        /// <summary>
        /// Assert10 - Use 'Assert10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert10()
        {
            #region Variable Declarations
            WinText uIValue2Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValue2Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 2' label equals 'Value: 2'
            Assert.AreEqual(this.Assert10ExpectedValues.UIValue2TextName, uIValue2Text.Name, "Value in A2 != 2");
        }
        
        /// <summary>
        /// Test11
        /// </summary>
        public void Test11()
        {
            #region Variable Declarations
            WinText uIToolStripButton2Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIToolStripButton2Text;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'toolStripButton2' label
            Mouse.Click(uIToolStripButton2Text, new Point(9, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(69, 81));
        }
        
        /// <summary>
        /// Assert10B - Use 'Assert10BExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert10B()
        {
            #region Variable Declarations
            WinText uIValue3Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValue3Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 3' label equals 'Value: 3'
            Assert.AreEqual(this.Assert10BExpectedValues.UIValue3TextName, uIValue3Text.Name, "Value in A3 != 3");
        }
        
        /// <summary>
        /// Test12 - Use 'Test12Params' to pass parameters into this method.
        /// </summary>
        public void Test12()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UIItemWindow.UIItemEdit;
            WinMenuItem uIRedoCtrlYMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIEditMenuItem.UIRedoCtrlYMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Type 'Control + y' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test12Params.UIItemEditSendKeys, ModifierKeys.Control);

            // Click 'Edit' -> 'Redo (Ctrl+Y)' menu item
            Mouse.Click(uIRedoCtrlYMenuItem, new Point(50, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 97));
        }
        
        /// <summary>
        /// Assert11 - Use 'Assert11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert11()
        {
            #region Variable Declarations
            WinText uIValue4Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValue4Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 4' label equals 'Value: 4'
            Assert.AreEqual(this.Assert11ExpectedValues.UIValue4TextName, uIValue4Text.Name, "Value in A4 != 4");
        }
        
        /// <summary>
        /// Test12B
        /// </summary>
        public void Test12B()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(45, 122));
        }
        
        /// <summary>
        /// Assert11B - Use 'Assert11BExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert11B()
        {
            #region Variable Declarations
            WinText uIValue5Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValue5Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 5' label equals 'Value: 5'
            Assert.AreEqual(this.Assert11BExpectedValues.UIValue5TextName, uIValue5Text.Name, "Value in A5 != 5");
        }
        
        /// <summary>
        /// Test13
        /// </summary>
        public void Test13()
        {
            #region Variable Declarations
            WinText uIToolStripButton2Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIToolStripButton2Text;
            #endregion

            // Double-Click 'toolStripButton2' label
            Mouse.DoubleClick(uIToolStripButton2Text, new Point(9, 10));

            // Click 'toolStripButton2' label
            Mouse.Click(uIToolStripButton2Text, new Point(9, 10));

            // Click 'toolStripButton2' label
            Mouse.Click(uIToolStripButton2Text, new Point(9, 10));

            // Click 'toolStripButton2' label
            Mouse.Click(uIToolStripButton2Text, new Point(9, 10));

            // Click 'toolStripButton2' label
            Mouse.Click(uIToolStripButton2Text, new Point(9, 10));
        }
        
        /// <summary>
        /// Test13B
        /// </summary>
        public void Test13B()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow1.UIItemWindow1.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(43, 235));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinText uIValue11Text = this.UISpreadsheetWindow1.UIToolStrip1ToolBar.UIValue11Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 11' label equals 'Value: 11'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIValue11TextName, uIValue11Text.Name, "Value in A11 != 11");
        }
        
        /// <summary>
        /// Assert13 - Use 'Assert13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert13()
        {
            #region Variable Declarations
            WinMenuItem uIRedoCtrlYMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIEditMenuItem.UIRedoCtrlYMenuItem;
            #endregion

            // Verify that the 'Enabled' property of 'Edit' -> 'Redo (Ctrl+Y)' menu item equals 'False'
            Assert.AreEqual(this.Assert13ExpectedValues.UIRedoCtrlYMenuItemEnabled, uIRedoCtrlYMenuItem.Enabled, "Redo is Enabled!");
        }
        
        /// <summary>
        /// Assert13B - Use 'Assert13BExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert13B()
        {
            #region Variable Declarations
            WinMenuItem uIUndoCtrlZMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIEditMenuItem.UIUndoCtrlZMenuItem;
            #endregion

            // Verify that the 'Enabled' property of 'Edit' -> 'Undo (Ctrl+Z)' menu item equals 'True'
            Assert.AreEqual(this.Assert13BExpectedValues.UIUndoCtrlZMenuItemEnabled, uIUndoCtrlZMenuItem.Enabled, "Undo is disabled!");
        }
        
        /// <summary>
        /// Test14 - Use 'Test14Params' to pass parameters into this method.
        /// </summary>
        public void Test14()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetunsavedWindow.UISpreadsheetunsavedTitleBar.UICloseButton;
            WinButton uICancelButton = this.UISaveBeforeClosingWindow.UICancelWindow.UICancelButton;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetunsavedWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveSpreadsheetAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveSpreadsheetAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 18));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(32, 12));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(35, 6));

            // Select 'test1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Test14Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(32, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(39, 9));
        }
        
        /// <summary>
        /// Assert14 - Use 'Assert14ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert14()
        {
            #region Variable Declarations
            WinMenuItem uIUndoCtrlZMenuItem = this.UISpreadsheetunsavedWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UIUndoCtrlZMenuItem;
            #endregion

            // Verify that the 'Enabled' property of 'Edit' -> 'Undo (Ctrl+Z)' menu item equals 'False'
            Assert.AreEqual(this.Assert14ExpectedValues.UIUndoCtrlZMenuItemEnabled, uIUndoCtrlZMenuItem.Enabled, "Undo is enabled after save!");
        }
        
        /// <summary>
        /// Assert14B - Use 'Assert14BExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert14B()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheetunsavedTitleBar = this.UISpreadsheetunsavedWindow.UISpreadsheetunsavedTitleBar;
            #endregion

            // Verify that the 'FriendlyName' property of 'Spreadsheet - (unsaved)' title bar equals 'Spreadsheet - test1'
            Assert.AreEqual(this.Assert14BExpectedValues.UISpreadsheetunsavedTitleBarFriendlyName, uISpreadsheetunsavedTitleBar.FriendlyName, "Does not have the correct name!");
        }
        
        /// <summary>
        /// Assert14C - Use 'Assert14CExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert14C()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheetunsavedTitleBar = this.UISpreadsheetunsavedWindow.UISpreadsheetunsavedTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Spreadsheet - (unsaved)' title bar equals 'Spreadsheet - (unsaved)'
            string a = this.Assert14CExpectedValues.UISpreadsheetunsavedTitleBarDisplayText;
            string b = uISpreadsheetunsavedTitleBar.DisplayText;
            Assert.AreEqual(a, b, "unsaved Spreadsheet has been saved!");
        }
        
        /// <summary>
        /// Test15 - Use 'Test15Params' to pass parameters into this method.
        /// </summary>
        public void Test15()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetunsavedWindow.UISpreadsheetunsavedTitleBar.UICloseButton;
            WinMenuItem uIOpenCtrlOMenuItem = this.UISpreadsheetunsavedWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenCtrlOMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenSpreadsheetWindow.UIItemWindow1.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenSpreadsheetWindow.UIOpenWindow.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetunsavedWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Type 'Control + s' in text box
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            Keyboard.SendKeys(uIItemEdit, this.TestEntryAndNavSave1Params.UIItemEditSendKeys, ModifierKeys.Control);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(26, 9));

            // Click 'File' -> 'Open Ctrl+O' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(33, 9));

            // Select 'test1.sprd' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Test15Params.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(46, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 38));
        }
        
        /// <summary>
        /// Assert15 - Use 'Assert15ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert15()
        {
            #region Variable Declarations
            WinText uIValue1Text = this.UISpreadsheetunsavedWindow.UIToolStrip1ToolBar.UIValue1Text;
            #endregion

            // Verify that the 'Name' property of 'Value: 1' label equals 'Value: 1'
            string a = this.Assert15ExpectedValues.UIValue1TextName;
            //string b = uIValue1Text.Name;
            Assert.AreEqual(a, "Value: 1", "Value in A1 != 1");
        }
        
        /// <summary>
        /// Test16 - Use 'Test16Params' to pass parameters into this method.
        /// </summary>
        public void Test16()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetunsavedWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetunsavedWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(148, 41));

            // Type '=B1' in text box
            uIItemEdit.Text = this.Test16Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test16Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Test16B
        /// </summary>
        public void Test16B()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetunsavedWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(170, 35));
        }
        
        /// <summary>
        /// Assert16 - Use 'Assert16ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert16()
        {
            #region Variable Declarations
            WinText uIValueText = this.UISpreadsheetunsavedWindow.UIToolStrip1ToolBar.UIValueText;
            #endregion

            // Verify that the 'Name' property of 'Value:' label equals 'Value: '
            string a = this.Assert16ExpectedValues.UIValueTextName;
            //string b = uIValueText.Name;
            Assert.AreEqual(a, "Value: ", "B1 did not revert to \"\"");
        }
        
        /// <summary>
        /// Assert16B - Use 'Assert16BExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert16B()
        {
            #region Variable Declarations
            WinText uITherewasaproblemwithText = this.UISpreadsheetunsavedWindow.UIStatusStrip1StatusBar.UITherewasaproblemwithText;
            #endregion

            // Verify that the 'Name' property of 'There was a problem with the Formula you entered i...' label equals 'There was a problem with the Formula you entered in B1.  Exception of type 'SS.CircularException' was thrown.'
            Assert.AreEqual(this.Assert16BExpectedValues.UITherewasaproblemwithTextName, uITherewasaproblemwithText.Name, "An incorrect message was returned");
        }
        
        /// <summary>
        /// Test17 - Use 'Test17Params' to pass parameters into this method.
        /// </summary>
        public void Test17()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetunsavedWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetunsavedWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(136, 41));

            // Type '=(A1-A2)/0' in text box
            uIItemEdit.Text = this.Test17Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test17Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(136, 42));
        }
        
        /// <summary>
        /// Test18 - Use 'Test18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test18()
        {
            #region Variable Declarations
            WinText uITherewasadiviedby0erText = this.UISpreadsheetunsavedWindow.UIToolStrip1ToolBar.UITherewasadiviedby0erText;
            #endregion

            // Verify that the 'Name' property of 'There was a divied by 0 error' label equals 'There was a divied by 0 error'
            Assert.AreEqual(this.Test18ExpectedValues.UITherewasadiviedby0erTextName, uITherewasadiviedby0erText.Name, "Divide by zero did not generate the correct error!");
        }
        
        /// <summary>
        /// Test19 - Use 'Test19Params' to pass parameters into this method.
        /// </summary>
        public void Test19()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetunsavedWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetunsavedWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(146, 62));

            // Type '=A1B2' in text box
            uIItemEdit.Text = this.Test19Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test19Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(130, 60));
        }
        
        /// <summary>
        /// Test19A - Use 'Test19AExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Test19A()
        {
            #region Variable Declarations
            WinText uIValueText = this.UISpreadsheetunsavedWindow.UIToolStrip1ToolBar.UIValueText;
            #endregion

            // Verify that the 'Name' property of 'Value:' label equals 'Value: '
            Assert.AreEqual(this.Test19AExpectedValues.UIValueTextName, uIValueText.Name, "Value in B2 did not revert to \"\"");
        }
        
        /// <summary>
        /// Assert17 - Use 'Assert17ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert17()
        {
            #region Variable Declarations
            WinText uITherewasaproblemwithText1 = this.UISpreadsheetunsavedWindow.UIStatusStrip1StatusBar.UITherewasaproblemwithText1;
            #endregion

            // Verify that the 'Name' property of 'There was a problem with the Formula you entered i...' label equals 'There was a problem with the Formula you entered in B2.  Exception of type 'SS.InvalidNameException' was thrown.'
            Assert.AreEqual(this.Assert17ExpectedValues.UITherewasaproblemwithText1Name, uITherewasaproblemwithText1.Name, "Did not throw correct error for entering invalid cell names");
        }
        
        /// <summary>
        /// Test20 - Use 'Test20Params' to pass parameters into this method.
        /// </summary>
        public void Test20()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetunsavedWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetunsavedWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(142, 56));

            // Type '=' in text box
            uIItemEdit.Text = this.Test20Params.UIItemEditText;

            // Type '=A5++/' in text box
            uIItemEdit.Text = this.Test20Params.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.Test20Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(164, 58));
        }
        
        /// <summary>
        /// Assert18 - Use 'Assert18ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert18()
        {
            #region Variable Declarations
            WinText uITherewasaproblemwithText2 = this.UISpreadsheetunsavedWindow.UIStatusStrip1StatusBar.UITherewasaproblemwithText2;
            #endregion

            // Verify that the 'Name' property of 'There was a problem with the Formula you entered i...' label equals 'There was a problem with the Formula you entered in B2.  / is not a valid ending token.'
            Assert.AreEqual(this.Assert18ExpectedValues.UITherewasaproblemwithText2Name, uITherewasaproblemwithText2.Name, "Incorrect error message returned for incorrect formula");
        }
        
        /// <summary>
        /// Test21
        /// </summary>
        public void Test21()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetunsavedWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(12, 6));
        }
        
        /// <summary>
        /// Assert19 - Use 'Assert19ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert19()
        {
            #region Variable Declarations
            WinTitleBar uIHelpTitleBar = this.UIHelpWindow.UIHelpTitleBar;
            #endregion

            // Verify that the 'FriendlyName' property of 'Help' title bar equals 'Help'
            Assert.AreEqual(this.Assert19ExpectedValues.UIHelpTitleBarFriendlyName, uIHelpTitleBar.FriendlyName, "The window that opened is not the help window");
        }
        
        /// <summary>
        /// Test22
        /// </summary>
        public void Test22()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIHelpWindow.UIHelpTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheetunsavedWindow.UISpreadsheetunsavedTitleBar.UICloseButton;
            WinButton uINOButton = this.UISaveBeforeClosingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(37, 21));

            // Click 'Close' button
            //Mouse.Click(uICloseButton1, new Point(16, 13));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(30, 13));
        }
        
        #region Properties
        public virtual TestEntryAndNav1Params TestEntryAndNav1Params
        {
            get
            {
                if ((this.mTestEntryAndNav1Params == null))
                {
                    this.mTestEntryAndNav1Params = new TestEntryAndNav1Params();
                }
                return this.mTestEntryAndNav1Params;
            }
        }
        
        public virtual AssertA1ExpectedValues AssertA1ExpectedValues
        {
            get
            {
                if ((this.mAssertA1ExpectedValues == null))
                {
                    this.mAssertA1ExpectedValues = new AssertA1ExpectedValues();
                }
                return this.mAssertA1ExpectedValues;
            }
        }
        
        public virtual TestEntryAndNav2Params TestEntryAndNav2Params
        {
            get
            {
                if ((this.mTestEntryAndNav2Params == null))
                {
                    this.mTestEntryAndNav2Params = new TestEntryAndNav2Params();
                }
                return this.mTestEntryAndNav2Params;
            }
        }
        
        public virtual AssertA2ExpectedValues AssertA2ExpectedValues
        {
            get
            {
                if ((this.mAssertA2ExpectedValues == null))
                {
                    this.mAssertA2ExpectedValues = new AssertA2ExpectedValues();
                }
                return this.mAssertA2ExpectedValues;
            }
        }
        
        public virtual TestEntryAndNav3Params TestEntryAndNav3Params
        {
            get
            {
                if ((this.mTestEntryAndNav3Params == null))
                {
                    this.mTestEntryAndNav3Params = new TestEntryAndNav3Params();
                }
                return this.mTestEntryAndNav3Params;
            }
        }
        
        public virtual AssertPositionIsA2ExpectedValues AssertPositionIsA2ExpectedValues
        {
            get
            {
                if ((this.mAssertPositionIsA2ExpectedValues == null))
                {
                    this.mAssertPositionIsA2ExpectedValues = new AssertPositionIsA2ExpectedValues();
                }
                return this.mAssertPositionIsA2ExpectedValues;
            }
        }
        
        public virtual TestEntryAndNav4Params TestEntryAndNav4Params
        {
            get
            {
                if ((this.mTestEntryAndNav4Params == null))
                {
                    this.mTestEntryAndNav4Params = new TestEntryAndNav4Params();
                }
                return this.mTestEntryAndNav4Params;
            }
        }
        
        public virtual AssertA3FormulaExpectedValues AssertA3FormulaExpectedValues
        {
            get
            {
                if ((this.mAssertA3FormulaExpectedValues == null))
                {
                    this.mAssertA3FormulaExpectedValues = new AssertA3FormulaExpectedValues();
                }
                return this.mAssertA3FormulaExpectedValues;
            }
        }
        
        public virtual TestEntryAndNav5Params TestEntryAndNav5Params
        {
            get
            {
                if ((this.mTestEntryAndNav5Params == null))
                {
                    this.mTestEntryAndNav5Params = new TestEntryAndNav5Params();
                }
                return this.mTestEntryAndNav5Params;
            }
        }
        
        public virtual AssertB2StringExpectedValues AssertB2StringExpectedValues
        {
            get
            {
                if ((this.mAssertB2StringExpectedValues == null))
                {
                    this.mAssertB2StringExpectedValues = new AssertB2StringExpectedValues();
                }
                return this.mAssertB2StringExpectedValues;
            }
        }
        
        public virtual TestEntryAndNavSave1Params TestEntryAndNavSave1Params
        {
            get
            {
                if ((this.mTestEntryAndNavSave1Params == null))
                {
                    this.mTestEntryAndNavSave1Params = new TestEntryAndNavSave1Params();
                }
                return this.mTestEntryAndNavSave1Params;
            }
        }
        
        public virtual TestSaveDialog1ExpectedValues TestSaveDialog1ExpectedValues
        {
            get
            {
                if ((this.mTestSaveDialog1ExpectedValues == null))
                {
                    this.mTestSaveDialog1ExpectedValues = new TestSaveDialog1ExpectedValues();
                }
                return this.mTestSaveDialog1ExpectedValues;
            }
        }
        
        public virtual TestClose1Params TestClose1Params
        {
            get
            {
                if ((this.mTestClose1Params == null))
                {
                    this.mTestClose1Params = new TestClose1Params();
                }
                return this.mTestClose1Params;
            }
        }
        
        public virtual Test1Params Test1Params
        {
            get
            {
                if ((this.mTest1Params == null))
                {
                    this.mTest1Params = new Test1Params();
                }
                return this.mTest1Params;
            }
        }
        
        public virtual Assert1ExpectedValues Assert1ExpectedValues
        {
            get
            {
                if ((this.mAssert1ExpectedValues == null))
                {
                    this.mAssert1ExpectedValues = new Assert1ExpectedValues();
                }
                return this.mAssert1ExpectedValues;
            }
        }
        
        public virtual Assert2ExpectedValues Assert2ExpectedValues
        {
            get
            {
                if ((this.mAssert2ExpectedValues == null))
                {
                    this.mAssert2ExpectedValues = new Assert2ExpectedValues();
                }
                return this.mAssert2ExpectedValues;
            }
        }
        
        public virtual Test3Params Test3Params
        {
            get
            {
                if ((this.mTest3Params == null))
                {
                    this.mTest3Params = new Test3Params();
                }
                return this.mTest3Params;
            }
        }
        
        public virtual Assert3ExpectedValues Assert3ExpectedValues
        {
            get
            {
                if ((this.mAssert3ExpectedValues == null))
                {
                    this.mAssert3ExpectedValues = new Assert3ExpectedValues();
                }
                return this.mAssert3ExpectedValues;
            }
        }
        
        public virtual Test4Params Test4Params
        {
            get
            {
                if ((this.mTest4Params == null))
                {
                    this.mTest4Params = new Test4Params();
                }
                return this.mTest4Params;
            }
        }
        
        public virtual Test4BParams Test4BParams
        {
            get
            {
                if ((this.mTest4BParams == null))
                {
                    this.mTest4BParams = new Test4BParams();
                }
                return this.mTest4BParams;
            }
        }
        
        public virtual Assert4ExpectedValues Assert4ExpectedValues
        {
            get
            {
                if ((this.mAssert4ExpectedValues == null))
                {
                    this.mAssert4ExpectedValues = new Assert4ExpectedValues();
                }
                return this.mAssert4ExpectedValues;
            }
        }
        
        public virtual Assert5ExpectedValues Assert5ExpectedValues
        {
            get
            {
                if ((this.mAssert5ExpectedValues == null))
                {
                    this.mAssert5ExpectedValues = new Assert5ExpectedValues();
                }
                return this.mAssert5ExpectedValues;
            }
        }
        
        public virtual Assert6ExpectedValues Assert6ExpectedValues
        {
            get
            {
                if ((this.mAssert6ExpectedValues == null))
                {
                    this.mAssert6ExpectedValues = new Assert6ExpectedValues();
                }
                return this.mAssert6ExpectedValues;
            }
        }
        
        public virtual Test7Params Test7Params
        {
            get
            {
                if ((this.mTest7Params == null))
                {
                    this.mTest7Params = new Test7Params();
                }
                return this.mTest7Params;
            }
        }
        
        public virtual Assert7ExpectedValues Assert7ExpectedValues
        {
            get
            {
                if ((this.mAssert7ExpectedValues == null))
                {
                    this.mAssert7ExpectedValues = new Assert7ExpectedValues();
                }
                return this.mAssert7ExpectedValues;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual Assert9AExpectedValues Assert9AExpectedValues
        {
            get
            {
                if ((this.mAssert9AExpectedValues == null))
                {
                    this.mAssert9AExpectedValues = new Assert9AExpectedValues();
                }
                return this.mAssert9AExpectedValues;
            }
        }
        
        public virtual Assert9BExpectedValues Assert9BExpectedValues
        {
            get
            {
                if ((this.mAssert9BExpectedValues == null))
                {
                    this.mAssert9BExpectedValues = new Assert9BExpectedValues();
                }
                return this.mAssert9BExpectedValues;
            }
        }
        
        public virtual Assert9CExpectedValues Assert9CExpectedValues
        {
            get
            {
                if ((this.mAssert9CExpectedValues == null))
                {
                    this.mAssert9CExpectedValues = new Assert9CExpectedValues();
                }
                return this.mAssert9CExpectedValues;
            }
        }
        
        public virtual Assert10ExpectedValues Assert10ExpectedValues
        {
            get
            {
                if ((this.mAssert10ExpectedValues == null))
                {
                    this.mAssert10ExpectedValues = new Assert10ExpectedValues();
                }
                return this.mAssert10ExpectedValues;
            }
        }
        
        public virtual Assert10BExpectedValues Assert10BExpectedValues
        {
            get
            {
                if ((this.mAssert10BExpectedValues == null))
                {
                    this.mAssert10BExpectedValues = new Assert10BExpectedValues();
                }
                return this.mAssert10BExpectedValues;
            }
        }
        
        public virtual Test12Params Test12Params
        {
            get
            {
                if ((this.mTest12Params == null))
                {
                    this.mTest12Params = new Test12Params();
                }
                return this.mTest12Params;
            }
        }
        
        public virtual Assert11ExpectedValues Assert11ExpectedValues
        {
            get
            {
                if ((this.mAssert11ExpectedValues == null))
                {
                    this.mAssert11ExpectedValues = new Assert11ExpectedValues();
                }
                return this.mAssert11ExpectedValues;
            }
        }
        
        public virtual Assert11BExpectedValues Assert11BExpectedValues
        {
            get
            {
                if ((this.mAssert11BExpectedValues == null))
                {
                    this.mAssert11BExpectedValues = new Assert11BExpectedValues();
                }
                return this.mAssert11BExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual Assert13ExpectedValues Assert13ExpectedValues
        {
            get
            {
                if ((this.mAssert13ExpectedValues == null))
                {
                    this.mAssert13ExpectedValues = new Assert13ExpectedValues();
                }
                return this.mAssert13ExpectedValues;
            }
        }
        
        public virtual Assert13BExpectedValues Assert13BExpectedValues
        {
            get
            {
                if ((this.mAssert13BExpectedValues == null))
                {
                    this.mAssert13BExpectedValues = new Assert13BExpectedValues();
                }
                return this.mAssert13BExpectedValues;
            }
        }
        
        public virtual Test14Params Test14Params
        {
            get
            {
                if ((this.mTest14Params == null))
                {
                    this.mTest14Params = new Test14Params();
                }
                return this.mTest14Params;
            }
        }
        
        public virtual Assert14ExpectedValues Assert14ExpectedValues
        {
            get
            {
                if ((this.mAssert14ExpectedValues == null))
                {
                    this.mAssert14ExpectedValues = new Assert14ExpectedValues();
                }
                return this.mAssert14ExpectedValues;
            }
        }
        
        public virtual Assert14BExpectedValues Assert14BExpectedValues
        {
            get
            {
                if ((this.mAssert14BExpectedValues == null))
                {
                    this.mAssert14BExpectedValues = new Assert14BExpectedValues();
                }
                return this.mAssert14BExpectedValues;
            }
        }
        
        public virtual Assert14CExpectedValues Assert14CExpectedValues
        {
            get
            {
                if ((this.mAssert14CExpectedValues == null))
                {
                    this.mAssert14CExpectedValues = new Assert14CExpectedValues();
                }
                return this.mAssert14CExpectedValues;
            }
        }
        
        public virtual Test15Params Test15Params
        {
            get
            {
                if ((this.mTest15Params == null))
                {
                    this.mTest15Params = new Test15Params();
                }
                return this.mTest15Params;
            }
        }
        
        public virtual Assert15ExpectedValues Assert15ExpectedValues
        {
            get
            {
                if ((this.mAssert15ExpectedValues == null))
                {
                    this.mAssert15ExpectedValues = new Assert15ExpectedValues();
                }
                return this.mAssert15ExpectedValues;
            }
        }
        
        public virtual Test16Params Test16Params
        {
            get
            {
                if ((this.mTest16Params == null))
                {
                    this.mTest16Params = new Test16Params();
                }
                return this.mTest16Params;
            }
        }
        
        public virtual Assert16ExpectedValues Assert16ExpectedValues
        {
            get
            {
                if ((this.mAssert16ExpectedValues == null))
                {
                    this.mAssert16ExpectedValues = new Assert16ExpectedValues();
                }
                return this.mAssert16ExpectedValues;
            }
        }
        
        public virtual Assert16BExpectedValues Assert16BExpectedValues
        {
            get
            {
                if ((this.mAssert16BExpectedValues == null))
                {
                    this.mAssert16BExpectedValues = new Assert16BExpectedValues();
                }
                return this.mAssert16BExpectedValues;
            }
        }
        
        public virtual Test17Params Test17Params
        {
            get
            {
                if ((this.mTest17Params == null))
                {
                    this.mTest17Params = new Test17Params();
                }
                return this.mTest17Params;
            }
        }
        
        public virtual Test18ExpectedValues Test18ExpectedValues
        {
            get
            {
                if ((this.mTest18ExpectedValues == null))
                {
                    this.mTest18ExpectedValues = new Test18ExpectedValues();
                }
                return this.mTest18ExpectedValues;
            }
        }
        
        public virtual Test19Params Test19Params
        {
            get
            {
                if ((this.mTest19Params == null))
                {
                    this.mTest19Params = new Test19Params();
                }
                return this.mTest19Params;
            }
        }
        
        public virtual Test19AExpectedValues Test19AExpectedValues
        {
            get
            {
                if ((this.mTest19AExpectedValues == null))
                {
                    this.mTest19AExpectedValues = new Test19AExpectedValues();
                }
                return this.mTest19AExpectedValues;
            }
        }
        
        public virtual Assert17ExpectedValues Assert17ExpectedValues
        {
            get
            {
                if ((this.mAssert17ExpectedValues == null))
                {
                    this.mAssert17ExpectedValues = new Assert17ExpectedValues();
                }
                return this.mAssert17ExpectedValues;
            }
        }
        
        public virtual Test20Params Test20Params
        {
            get
            {
                if ((this.mTest20Params == null))
                {
                    this.mTest20Params = new Test20Params();
                }
                return this.mTest20Params;
            }
        }
        
        public virtual Assert18ExpectedValues Assert18ExpectedValues
        {
            get
            {
                if ((this.mAssert18ExpectedValues == null))
                {
                    this.mAssert18ExpectedValues = new Assert18ExpectedValues();
                }
                return this.mAssert18ExpectedValues;
            }
        }
        
        public virtual Assert19ExpectedValues Assert19ExpectedValues
        {
            get
            {
                if ((this.mAssert19ExpectedValues == null))
                {
                    this.mAssert19ExpectedValues = new Assert19ExpectedValues();
                }
                return this.mAssert19ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISaveSpreadsheetAsWindow UISaveSpreadsheetAsWindow
        {
            get
            {
                if ((this.mUISaveSpreadsheetAsWindow == null))
                {
                    this.mUISaveSpreadsheetAsWindow = new UISaveSpreadsheetAsWindow();
                }
                return this.mUISaveSpreadsheetAsWindow;
            }
        }
        
        public UIOpenSpreadsheetWindow UIOpenSpreadsheetWindow
        {
            get
            {
                if ((this.mUIOpenSpreadsheetWindow == null))
                {
                    this.mUIOpenSpreadsheetWindow = new UIOpenSpreadsheetWindow();
                }
                return this.mUIOpenSpreadsheetWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UISpreadsheetunsavedWindow UISpreadsheetunsavedWindow
        {
            get
            {
                if ((this.mUISpreadsheetunsavedWindow == null))
                {
                    this.mUISpreadsheetunsavedWindow = new UISpreadsheetunsavedWindow();
                }
                return this.mUISpreadsheetunsavedWindow;
            }
        }
        
        public UISaveBeforeClosingWindow UISaveBeforeClosingWindow
        {
            get
            {
                if ((this.mUISaveBeforeClosingWindow == null))
                {
                    this.mUISaveBeforeClosingWindow = new UISaveBeforeClosingWindow();
                }
                return this.mUISaveBeforeClosingWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestEntryAndNav1Params mTestEntryAndNav1Params;
        
        private AssertA1ExpectedValues mAssertA1ExpectedValues;
        
        private TestEntryAndNav2Params mTestEntryAndNav2Params;
        
        private AssertA2ExpectedValues mAssertA2ExpectedValues;
        
        private TestEntryAndNav3Params mTestEntryAndNav3Params;
        
        private AssertPositionIsA2ExpectedValues mAssertPositionIsA2ExpectedValues;
        
        private TestEntryAndNav4Params mTestEntryAndNav4Params;
        
        private AssertA3FormulaExpectedValues mAssertA3FormulaExpectedValues;
        
        private TestEntryAndNav5Params mTestEntryAndNav5Params;
        
        private AssertB2StringExpectedValues mAssertB2StringExpectedValues;
        
        private TestEntryAndNavSave1Params mTestEntryAndNavSave1Params;
        
        private TestSaveDialog1ExpectedValues mTestSaveDialog1ExpectedValues;
        
        private TestClose1Params mTestClose1Params;
        
        private Test1Params mTest1Params;
        
        private Assert1ExpectedValues mAssert1ExpectedValues;
        
        private Assert2ExpectedValues mAssert2ExpectedValues;
        
        private Test3Params mTest3Params;
        
        private Assert3ExpectedValues mAssert3ExpectedValues;
        
        private Test4Params mTest4Params;
        
        private Test4BParams mTest4BParams;
        
        private Assert4ExpectedValues mAssert4ExpectedValues;
        
        private Assert5ExpectedValues mAssert5ExpectedValues;
        
        private Assert6ExpectedValues mAssert6ExpectedValues;
        
        private Test7Params mTest7Params;
        
        private Assert7ExpectedValues mAssert7ExpectedValues;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private Assert9AExpectedValues mAssert9AExpectedValues;
        
        private Assert9BExpectedValues mAssert9BExpectedValues;
        
        private Assert9CExpectedValues mAssert9CExpectedValues;
        
        private Assert10ExpectedValues mAssert10ExpectedValues;
        
        private Assert10BExpectedValues mAssert10BExpectedValues;
        
        private Test12Params mTest12Params;
        
        private Assert11ExpectedValues mAssert11ExpectedValues;
        
        private Assert11BExpectedValues mAssert11BExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private Assert13ExpectedValues mAssert13ExpectedValues;
        
        private Assert13BExpectedValues mAssert13BExpectedValues;
        
        private Test14Params mTest14Params;
        
        private Assert14ExpectedValues mAssert14ExpectedValues;
        
        private Assert14BExpectedValues mAssert14BExpectedValues;
        
        private Assert14CExpectedValues mAssert14CExpectedValues;
        
        private Test15Params mTest15Params;
        
        private Assert15ExpectedValues mAssert15ExpectedValues;
        
        private Test16Params mTest16Params;
        
        private Assert16ExpectedValues mAssert16ExpectedValues;
        
        private Assert16BExpectedValues mAssert16BExpectedValues;
        
        private Test17Params mTest17Params;
        
        private Test18ExpectedValues mTest18ExpectedValues;
        
        private Test19Params mTest19Params;
        
        private Test19AExpectedValues mTest19AExpectedValues;
        
        private Assert17ExpectedValues mAssert17ExpectedValues;
        
        private Test20Params mTest20Params;
        
        private Assert18ExpectedValues mAssert18ExpectedValues;
        
        private Assert19ExpectedValues mAssert19ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISaveSpreadsheetAsWindow mUISaveSpreadsheetAsWindow;
        
        private UIOpenSpreadsheetWindow mUIOpenSpreadsheetWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UISpreadsheetunsavedWindow mUISpreadsheetunsavedWindow;
        
        private UISaveBeforeClosingWindow mUISaveBeforeClosingWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIHelpWindow mUIHelpWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEntryAndNav1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEntryAndNav1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertA1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value: 1' label equals 'Value: 1'
        /// </summary>
        public string UIValue1TextControlType = "Value: 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEntryAndNav2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEntryAndNav2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '10.01' in text box
        /// </summary>
        public string UIItemEditText = "10.01";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Right}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertA2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value: 10.01' label equals 'Value: 10.01'
        /// </summary>
        public string UIValue1001TextControlType = "Value: 10.01";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEntryAndNav3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEntryAndNav3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '' in text box
        /// </summary>
        public string UIItemEditText = "10.01";
        
        /// <summary>
        /// Type '{Tab}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Left}' in 'toolStrip1' text box
        /// </summary>
        public string UIToolStrip1EditSendKeys = "{Left}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertPositionIsA2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertPositionIsA2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'A2' label equals 'A2'
        /// </summary>
        public string UIA2TextName = "A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEntryAndNav4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEntryAndNav4Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2' in text box
        /// </summary>
        public string UIItemEditText = "=A1+A2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA3Formula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertA3FormulaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 11.01' label equals 'Value: 11.01'
        /// </summary>
        public string UIValue1101TextName = "Value: 11.01";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEntryAndNav5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEntryAndNav5Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello World!' in text box
        /// </summary>
        public string UIItemEditText = "Hello World!";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertB2String'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertB2StringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: Hello World!' label equals 'Value: Hello World!'
        /// </summary>
        public string UIValueHelloWorldTextName = "Value: Hello World!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEntryAndNavSave1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEntryAndNavSave1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + s' in text box
        /// </summary>
        public string UIItemEditSendKeys = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestSaveDialog1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestSaveDialog1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Save Spreadsheet As' title bar equals 'Save Spreadsheet As'
        /// </summary>
        public string UISaveSpreadsheetAsTitleBarDisplayText = "Save Spreadsheet As";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestClose1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestClose1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + o' in text box
        /// </summary>
        public string UIItemEditSendKeys = "o";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Open Spreadsheet' title bar equals 'Open Spreadsheet'
        /// </summary>
        public string UIOpenSpreadsheetTitleBarDisplayText = "Open Spreadsheet";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 1' label equals 'Value: 1'
        /// </summary>
        public string UIValue1TextName = "Value: 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{F2}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{F2}";
        
        /// <summary>
        /// Type '{Left}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Left}";
        
        /// <summary>
        /// Type '21' in text box
        /// </summary>
        public string UIItemEditText = "21";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 21' label equals 'Value: 21'
        /// </summary>
        public string UIValue21TextName = "Value: 21";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test4Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + n' in text box
        /// </summary>
        public string UIItemEditSendKeys = "n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test4B'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test4BParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in text box
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in text box
        /// </summary>
        public string UIItemEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '4' in text box
        /// </summary>
        public string UIItemEditText3 = "4";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '5' in text box
        /// </summary>
        public string UIItemEditText4 = "5";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '6' in text box
        /// </summary>
        public string UIItemEditText5 = "6";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '7' in text box
        /// </summary>
        public string UIItemEditText6 = "7";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '8' in text box
        /// </summary>
        public string UIItemEditText7 = "8";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '9' in text box
        /// </summary>
        public string UIItemEditText8 = "9";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type '10' in text box
        /// </summary>
        public string UIItemEditText9 = "10";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys9 = "{Enter}";
        
        /// <summary>
        /// Type '11' in text box
        /// </summary>
        public string UIItemEditText10 = "11";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys10 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 11' label equals 'Value: 11'
        /// </summary>
        public string UIValue11TextName = "Value: 11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 2' label equals 'Value: 2'
        /// </summary>
        public string UIValue2TextName = "Value: 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value:' label equals 'Value: '
        /// </summary>
        public string UIValueTextName = "Value: ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test7Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + z' in text box
        /// </summary>
        public string UIItemEditSendKeys = "z";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value:' label equals 'Value: '
        /// </summary>
        public string UIValueTextName = "Value: ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value:' label equals 'Value: '
        /// </summary>
        public string UIValueTextName = "Value: ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert9A'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert9AExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value:' label equals 'Value: '
        /// </summary>
        public string UIValueTextName = "Value: ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert9B'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert9BExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Edit' -> 'Undo (Ctrl+Z)' menu item equals 'False'
        /// </summary>
        public bool UIUndoCtrlZMenuItemEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert9C'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert9CExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Edit' -> 'Redo (Ctrl+Y)' menu item equals 'True'
        /// </summary>
        public bool UIRedoCtrlYMenuItemEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 2' label equals 'Value: 2'
        /// </summary>
        public string UIValue2TextName = "Value: 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert10B'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert10BExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 3' label equals 'Value: 3'
        /// </summary>
        public string UIValue3TextName = "Value: 3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test12Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + y' in text box
        /// </summary>
        public string UIItemEditSendKeys = "y";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 4' label equals 'Value: 4'
        /// </summary>
        public string UIValue4TextName = "Value: 4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert11B'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert11BExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 5' label equals 'Value: 5'
        /// </summary>
        public string UIValue5TextName = "Value: 5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 11' label equals 'Value: 11'
        /// </summary>
        public string UIValue11TextName = "Value: 11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Edit' -> 'Redo (Ctrl+Y)' menu item equals 'False'
        /// </summary>
        public bool UIRedoCtrlYMenuItemEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert13B'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert13BExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Edit' -> 'Undo (Ctrl+Z)' menu item equals 'True'
        /// </summary>
        public bool UIUndoCtrlZMenuItemEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test14Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert14'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert14ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Edit' -> 'Undo (Ctrl+Z)' menu item equals 'False'
        /// </summary>
        public bool UIUndoCtrlZMenuItemEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert14B'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert14BExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Spreadsheet - (unsaved)' title bar equals 'Spreadsheet - test1'
        /// </summary>
        public string UISpreadsheetunsavedTitleBarFriendlyName = "Spreadsheet - test1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert14C'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert14CExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Spreadsheet - (unsaved)' title bar equals 'Spreadsheet - (unsaved)'
        /// </summary>
        public string UISpreadsheetunsavedTitleBarDisplayText = "Spreadsheet - test1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test15Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test1.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test1.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert15ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value: 1' label equals 'Value: 1'
        /// </summary>
        public string UIValue1TextName = "Value: 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test16Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=B1' in text box
        /// </summary>
        public string UIItemEditText = "=B1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert16'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert16ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value:' label equals 'Value: '
        /// </summary>
        public string UIValueTextName = "Value: ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert16B'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert16BExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'There was a problem with the Formula you entered i...' label equals 'There was a problem with the Formula you entered in B1.  Exception of type 'SS.CircularException' was thrown.'
        /// </summary>
        public string UITherewasaproblemwithTextName = "There was a problem with the Formula you entered in B1.  Exception of type \'SS.Ci" +
            "rcularException\' was thrown.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test17Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=(A1-A2)/0' in text box
        /// </summary>
        public string UIItemEditText = "=(A1-A2)/0";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'There was a divied by 0 error' label equals 'There was a divied by 0 error'
        /// </summary>
        public string UITherewasadiviedby0erTextName = "There was a divied by 0 error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test19Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1B2' in text box
        /// </summary>
        public string UIItemEditText = "=A1B2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test19A'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test19AExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Value:' label equals 'Value: '
        /// </summary>
        public string UIValueTextName = "Value: ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert17'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert17ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'There was a problem with the Formula you entered i...' label equals 'There was a problem with the Formula you entered in B2.  Exception of type 'SS.InvalidNameException' was thrown.'
        /// </summary>
        public string UITherewasaproblemwithText1Name = "There was a problem with the Formula you entered in B2.  Exception of type \'SS.In" +
            "validNameException\' was thrown.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test20'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test20Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=' in text box
        /// </summary>
        public string UIItemEditText = "=";
        
        /// <summary>
        /// Type '=A5++/' in text box
        /// </summary>
        public string UIItemEditText1 = "=A5++/";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert18'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert18ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'There was a problem with the Formula you entered i...' label equals 'There was a problem with the Formula you entered in B2.  / is not a valid ending token.'
        /// </summary>
        public string UITherewasaproblemwithText2Name = "There was a problem with the Formula you entered in B2.  / is not a valid ending " +
            "token.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert19'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert19ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Help' title bar equals 'Help'
        /// </summary>
        public string UIHelpTitleBarFriendlyName = "Help";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIToolStrip1ToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public WinTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISpreadsheetTitleBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIToolStrip1ToolBar mUIToolStrip1ToolBar;
        
        private WinTitleBar mUISpreadsheetTitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinEdit UIToolStrip1Edit
        {
            get
            {
                if ((this.mUIToolStrip1Edit == null))
                {
                    this.mUIToolStrip1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIToolStrip1Edit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIToolStrip1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        
        private WinEdit mUIToolStrip1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolStrip1ToolBar : WinToolBar
    {
        
        public UIToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIValue1Text
        {
            get
            {
                if ((this.mUIValue1Text == null))
                {
                    this.mUIValue1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue1Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 1";
                    this.mUIValue1Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue1Text;
            }
        }
        
        public WinText UIValue1001Text
        {
            get
            {
                if ((this.mUIValue1001Text == null))
                {
                    this.mUIValue1001Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue1001Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 10.01";
                    this.mUIValue1001Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue1001Text;
            }
        }
        
        public WinText UIA2Text
        {
            get
            {
                if ((this.mUIA2Text == null))
                {
                    this.mUIA2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIA2Text.SearchProperties[WinText.PropertyNames.Name] = "A2";
                    this.mUIA2Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIA2Text;
            }
        }
        
        public WinText UIValue1101Text
        {
            get
            {
                if ((this.mUIValue1101Text == null))
                {
                    this.mUIValue1101Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue1101Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 11.01";
                    this.mUIValue1101Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue1101Text;
            }
        }
        
        public WinText UIValueHelloWorldText
        {
            get
            {
                if ((this.mUIValueHelloWorldText == null))
                {
                    this.mUIValueHelloWorldText = new WinText(this);
                    #region Search Criteria
                    this.mUIValueHelloWorldText.SearchProperties[WinText.PropertyNames.Name] = "Value: Hello World!";
                    this.mUIValueHelloWorldText.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueHelloWorldText;
            }
        }
        
        public WinText UIValue21Text
        {
            get
            {
                if ((this.mUIValue21Text == null))
                {
                    this.mUIValue21Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue21Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 21";
                    this.mUIValue21Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue21Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIValue1Text;
        
        private WinText mUIValue1001Text;
        
        private WinText mUIA2Text;
        
        private WinText mUIValue1101Text;
        
        private WinText mUIValueHelloWorldText;
        
        private WinText mUIValue21Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIOpenCtrlOMenuItem
        {
            get
            {
                if ((this.mUIOpenCtrlOMenuItem == null))
                {
                    this.mUIOpenCtrlOMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenCtrlOMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open            Ctrl+O";
                    this.mUIOpenCtrlOMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenCtrlOMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenCtrlOMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIOpenCtrlOMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveSpreadsheetAsWindow : WinWindow
    {
        
        public UISaveSpreadsheetAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Spreadsheet As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Spreadsheet As");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISaveSpreadsheetAsTitleBar
        {
            get
            {
                if ((this.mUISaveSpreadsheetAsTitleBar == null))
                {
                    this.mUISaveSpreadsheetAsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISaveSpreadsheetAsTitleBar.WindowTitles.Add("Save Spreadsheet As");
                    #endregion
                }
                return this.mUISaveSpreadsheetAsTitleBar;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISaveSpreadsheetAsTitleBar;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save Spreadsheet As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save Spreadsheet As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save Spreadsheet As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save Spreadsheet As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenSpreadsheetWindow : WinWindow
    {
        
        public UIOpenSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIOpenSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUIOpenSpreadsheetTitleBar == null))
                {
                    this.mUIOpenSpreadsheetTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIOpenSpreadsheetTitleBar.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUIOpenSpreadsheetTitleBar;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIOpenSpreadsheetTitleBar;
        
        private UICancelWindow mUICancelWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITest1sprdListItem UITest1sprdListItem
        {
            get
            {
                if ((this.mUITest1sprdListItem == null))
                {
                    this.mUITest1sprdListItem = new UITest1sprdListItem(this);
                }
                return this.mUITest1sprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest1sprdListItem mUITest1sprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITest1sprdListItem : WinListItem
    {
        
        public UITest1sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test1.sprd";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISpreadsheetTitleBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIToolStrip1ToolBar1 UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar1(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISpreadsheetTitleBar;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIToolStrip1ToolBar1 mUIToolStrip1ToolBar;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolStrip1ToolBar1 : WinToolBar
    {
        
        public UIToolStrip1ToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIValue11Text
        {
            get
            {
                if ((this.mUIValue11Text == null))
                {
                    this.mUIValue11Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue11Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 11";
                    this.mUIValue11Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue11Text;
            }
        }
        
        public WinText UIValue2Text
        {
            get
            {
                if ((this.mUIValue2Text == null))
                {
                    this.mUIValue2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue2Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 2";
                    this.mUIValue2Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue2Text;
            }
        }
        
        public WinText UIToolStripButton1Text
        {
            get
            {
                if ((this.mUIToolStripButton1Text == null))
                {
                    this.mUIToolStripButton1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIToolStripButton1Text.SearchProperties[WinText.PropertyNames.Name] = "toolStripButton1";
                    this.mUIToolStripButton1Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIToolStripButton1Text;
            }
        }
        
        public WinText UIValueText
        {
            get
            {
                if ((this.mUIValueText == null))
                {
                    this.mUIValueText = new WinText(this);
                    #region Search Criteria
                    this.mUIValueText.SearchProperties[WinText.PropertyNames.Name] = "Value: ";
                    this.mUIValueText.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueText;
            }
        }
        
        public WinText UIToolStripButton2Text
        {
            get
            {
                if ((this.mUIToolStripButton2Text == null))
                {
                    this.mUIToolStripButton2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIToolStripButton2Text.SearchProperties[WinText.PropertyNames.Name] = "toolStripButton2";
                    this.mUIToolStripButton2Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIToolStripButton2Text;
            }
        }
        
        public WinText UIValue3Text
        {
            get
            {
                if ((this.mUIValue3Text == null))
                {
                    this.mUIValue3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue3Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 3";
                    this.mUIValue3Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue3Text;
            }
        }
        
        public WinText UIValue4Text
        {
            get
            {
                if ((this.mUIValue4Text == null))
                {
                    this.mUIValue4Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue4Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 4";
                    this.mUIValue4Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue4Text;
            }
        }
        
        public WinText UIValue5Text
        {
            get
            {
                if ((this.mUIValue5Text == null))
                {
                    this.mUIValue5Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue5Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 5";
                    this.mUIValue5Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue5Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIValue11Text;
        
        private WinText mUIValue2Text;
        
        private WinText mUIToolStripButton1Text;
        
        private WinText mUIValueText;
        
        private WinText mUIToolStripButton2Text;
        
        private WinText mUIValue3Text;
        
        private WinText mUIValue4Text;
        
        private WinText mUIValue5Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIEditMenuItem mUIEditMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIUndoCtrlZMenuItem
        {
            get
            {
                if ((this.mUIUndoCtrlZMenuItem == null))
                {
                    this.mUIUndoCtrlZMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIUndoCtrlZMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Undo    (Ctrl+Z)";
                    this.mUIUndoCtrlZMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUndoCtrlZMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIUndoCtrlZMenuItem;
            }
        }
        
        public WinMenuItem UIRedoCtrlYMenuItem
        {
            get
            {
                if ((this.mUIRedoCtrlYMenuItem == null))
                {
                    this.mUIRedoCtrlYMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRedoCtrlYMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Redo     (Ctrl+Y)";
                    this.mUIRedoCtrlYMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRedoCtrlYMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIRedoCtrlYMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIUndoCtrlZMenuItem;
        
        private WinMenuItem mUIRedoCtrlYMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetunsavedWindow : WinWindow
    {
        
        public UISpreadsheetunsavedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - (unsaved)";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - (unsaved)");
            this.WindowTitles.Add("Spreadsheet - test1");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetunsavedTitleBar UISpreadsheetunsavedTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetunsavedTitleBar == null))
                {
                    this.mUISpreadsheetunsavedTitleBar = new UISpreadsheetunsavedTitleBar(this);
                }
                return this.mUISpreadsheetunsavedTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIToolStrip1ToolBar2 UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar2(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIStatusStrip1StatusBar UIStatusStrip1StatusBar
        {
            get
            {
                if ((this.mUIStatusStrip1StatusBar == null))
                {
                    this.mUIStatusStrip1StatusBar = new UIStatusStrip1StatusBar(this);
                }
                return this.mUIStatusStrip1StatusBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetunsavedTitleBar mUISpreadsheetunsavedTitleBar;
        
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIToolStrip1ToolBar2 mUIToolStrip1ToolBar;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIStatusStrip1StatusBar mUIStatusStrip1StatusBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetunsavedTitleBar : WinTitleBar
    {
        
        public UISpreadsheetunsavedTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - (unsaved)");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - (unsaved)");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - (unsaved)");
            this.WindowTitles.Add("Spreadsheet - test1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIEditMenuItem1 UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem1(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        
        private UIEditMenuItem1 mUIEditMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - (unsaved)");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Spreadsheet - (unsaved)");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UIOpenCtrlOMenuItem
        {
            get
            {
                if ((this.mUIOpenCtrlOMenuItem == null))
                {
                    this.mUIOpenCtrlOMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenCtrlOMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open            Ctrl+O";
                    this.mUIOpenCtrlOMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenCtrlOMenuItem.WindowTitles.Add("Spreadsheet - (unsaved)");
                    #endregion
                }
                return this.mUIOpenCtrlOMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUIOpenCtrlOMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEditMenuItem1 : WinMenuItem
    {
        
        public UIEditMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("Spreadsheet - test1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIUndoCtrlZMenuItem
        {
            get
            {
                if ((this.mUIUndoCtrlZMenuItem == null))
                {
                    this.mUIUndoCtrlZMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIUndoCtrlZMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Undo    (Ctrl+Z)";
                    this.mUIUndoCtrlZMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIUndoCtrlZMenuItem.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUIUndoCtrlZMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIUndoCtrlZMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - test1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolStrip1ToolBar2 : WinToolBar
    {
        
        public UIToolStrip1ToolBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip2";
            this.WindowTitles.Add("Spreadsheet - test1");
            #endregion
        }
        
        #region Properties
        public WinText UIValue1Text
        {
            get
            {
                if ((this.mUIValue1Text == null))
                {
                    this.mUIValue1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue1Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 1";
                    this.mUIValue1Text.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUIValue1Text;
            }
        }
        
        public WinText UIValueText
        {
            get
            {
                if ((this.mUIValueText == null))
                {
                    this.mUIValueText = new WinText(this);
                    #region Search Criteria
                    this.mUIValueText.SearchProperties[WinText.PropertyNames.Name] = "Value: ";
                    this.mUIValueText.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUIValueText;
            }
        }
        
        public WinText UITherewasadiviedby0erText
        {
            get
            {
                if ((this.mUITherewasadiviedby0erText == null))
                {
                    this.mUITherewasadiviedby0erText = new WinText(this);
                    #region Search Criteria
                    this.mUITherewasadiviedby0erText.SearchProperties[WinText.PropertyNames.Name] = "There was a divied by 0 error";
                    this.mUITherewasadiviedby0erText.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUITherewasadiviedby0erText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIValue1Text;
        
        private WinText mUIValueText;
        
        private WinText mUITherewasadiviedby0erText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - test1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStatusStrip1StatusBar : WinStatusBar
    {
        
        public UIStatusStrip1StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "statusStrip1";
            this.WindowTitles.Add("Spreadsheet - test1");
            #endregion
        }
        
        #region Properties
        public WinText UITherewasaproblemwithText
        {
            get
            {
                if ((this.mUITherewasaproblemwithText == null))
                {
                    this.mUITherewasaproblemwithText = new WinText(this);
                    #region Search Criteria
                    this.mUITherewasaproblemwithText.SearchProperties[WinText.PropertyNames.Name] = "There was a problem with the Formula you entered in B1.  Exception of type \'SS.Ci" +
                        "rcularException\' was thrown.";
                    this.mUITherewasaproblemwithText.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUITherewasaproblemwithText;
            }
        }
        
        public WinText UITherewasaproblemwithText1
        {
            get
            {
                if ((this.mUITherewasaproblemwithText1 == null))
                {
                    this.mUITherewasaproblemwithText1 = new WinText(this);
                    #region Search Criteria
                    this.mUITherewasaproblemwithText1.SearchProperties[WinText.PropertyNames.Name] = "There was a problem with the Formula you entered in B2.  Exception of type \'SS.In" +
                        "validNameException\' was thrown.";
                    this.mUITherewasaproblemwithText1.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUITherewasaproblemwithText1;
            }
        }
        
        public WinText UITherewasaproblemwithText2
        {
            get
            {
                if ((this.mUITherewasaproblemwithText2 == null))
                {
                    this.mUITherewasaproblemwithText2 = new WinText(this);
                    #region Search Criteria
                    this.mUITherewasaproblemwithText2.SearchProperties[WinText.PropertyNames.Name] = "There was a problem with the Formula you entered in B2.  / is not a valid ending " +
                        "token.";
                    this.mUITherewasaproblemwithText2.WindowTitles.Add("Spreadsheet - test1");
                    #endregion
                }
                return this.mUITherewasaproblemwithText2;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITherewasaproblemwithText;
        
        private WinText mUITherewasaproblemwithText1;
        
        private WinText mUITherewasaproblemwithText2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveBeforeClosingWindow : WinWindow
    {
        
        public UISaveBeforeClosingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Before Closing";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Before Closing");
            #endregion
        }
        
        #region Properties
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow1 mUICancelWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save Before Closing");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save Before Closing");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Save Before Closing");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Save Before Closing");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIHelpTitleBar UIHelpTitleBar
        {
            get
            {
                if ((this.mUIHelpTitleBar == null))
                {
                    this.mUIHelpTitleBar = new UIHelpTitleBar(this);
                }
                return this.mUIHelpTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpTitleBar mUIHelpTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpTitleBar : WinTitleBar
    {
        
        public UIHelpTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
