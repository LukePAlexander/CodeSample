'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 14.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace CodedUITestProject1
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''Create several windows and exit out of them to ensure the program properly terminates.
        '''</summary>
        Public Sub CreateAndCloseWindows()
            Dim uISpreadsheetGUIShortcListItem As WinListItem = Me.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem
            Dim uIOpenButton As WinButton = Me.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton
            Dim uINewCtrlNMenuItem As WinMenuItem = Me.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewCtrlNMenuItem
            Dim uINewCtrlNMenuItem1 As WinMenuItem = Me.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewCtrlNMenuItem
            Dim uICloseButton As WinButton = Me.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton
            Dim uICloseButton1 As WinButton = Me.UISpreadsheetWindow1.UISpreadsheetTitleBar.UICloseButton

            'Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, New Point(38, 19))

            'Click '&Open' button
            Mouse.Click(uIOpenButton, New Point(58, 12))

            'Click 'File' -> 'New Ctrl+N' menu item
            Mouse.Click(uINewCtrlNMenuItem, New Point(17, 7))

            'Click 'File' -> 'New Ctrl+N' menu item
            Mouse.Click(uINewCtrlNMenuItem1, New Point(28, 10))

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(19, 6))

            'Click 'Close' button
            Mouse.Click(uICloseButton1, New Point(18, 10))

            'Click 'Close' button
            Mouse.Click(uICloseButton, New Point(13, 15))
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIProgramManagerWindow() As UIProgramManagerWindow
            Get
                If (Me.mUIProgramManagerWindow Is Nothing) Then
                    Me.mUIProgramManagerWindow = New UIProgramManagerWindow()
                End If
                Return Me.mUIProgramManagerWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOpenFileSecurityWarnWindow() As UIOpenFileSecurityWarnWindow
            Get
                If (Me.mUIOpenFileSecurityWarnWindow Is Nothing) Then
                    Me.mUIOpenFileSecurityWarnWindow = New UIOpenFileSecurityWarnWindow()
                End If
                Return Me.mUIOpenFileSecurityWarnWindow
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetWindow() As UISpreadsheetWindow
            Get
                If (Me.mUISpreadsheetWindow Is Nothing) Then
                    Me.mUISpreadsheetWindow = New UISpreadsheetWindow()
                End If
                Return Me.mUISpreadsheetWindow
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetWindow1() As UISpreadsheetWindow1
            Get
                If (Me.mUISpreadsheetWindow1 Is Nothing) Then
                    Me.mUISpreadsheetWindow1 = New UISpreadsheetWindow1()
                End If
                Return Me.mUISpreadsheetWindow1
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIProgramManagerWindow As UIProgramManagerWindow
        
        Private mUIOpenFileSecurityWarnWindow As UIOpenFileSecurityWarnWindow
        
        Private mUISpreadsheetWindow As UISpreadsheetWindow
        
        Private mUISpreadsheetWindow1 As UISpreadsheetWindow1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIProgramManagerWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Program Manager"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "Progman"
            Me.WindowTitles.Add("Program Manager")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIDesktopList() As UIDesktopList
            Get
                If (Me.mUIDesktopList Is Nothing) Then
                    Me.mUIDesktopList = New UIDesktopList(Me)
                End If
                Return Me.mUIDesktopList
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIDesktopList As UIDesktopList
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIDesktopList
        Inherits WinList
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinList.PropertyNames.Name) = "Desktop"
            Me.WindowTitles.Add("Program Manager")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISpreadsheetGUIShortcListItem() As WinListItem
            Get
                If (Me.mUISpreadsheetGUIShortcListItem Is Nothing) Then
                    Me.mUISpreadsheetGUIShortcListItem = New WinListItem(Me)
                    Me.mUISpreadsheetGUIShortcListItem.SearchProperties(WinListItem.PropertyNames.Name) = "SpreadsheetGUI - Shortcut"
                    Me.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager")
                End If
                Return Me.mUISpreadsheetGUIShortcListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISpreadsheetGUIShortcListItem As WinListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIOpenFileSecurityWarnWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Open File - Security Warning"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Open File - Security Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOpenWindow() As UIOpenWindow
            Get
                If (Me.mUIOpenWindow Is Nothing) Then
                    Me.mUIOpenWindow = New UIOpenWindow(Me)
                End If
                Return Me.mUIOpenWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOpenWindow As UIOpenWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIOpenWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "4426"
            Me.WindowTitles.Add("Open File - Security Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOpenButton() As WinButton
            Get
                If (Me.mUIOpenButton Is Nothing) Then
                    Me.mUIOpenButton = New WinButton(Me)
                    Me.mUIOpenButton.SearchProperties(WinButton.PropertyNames.Name) = "Open"
                    Me.mUIOpenButton.WindowTitles.Add("Open File - Security Warning")
                End If
                Return Me.mUIOpenButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOpenButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UISpreadsheetWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Spreadsheet"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIMenuStrip1MenuBar() As UIMenuStrip1MenuBar
            Get
                If (Me.mUIMenuStrip1MenuBar Is Nothing) Then
                    Me.mUIMenuStrip1MenuBar = New UIMenuStrip1MenuBar(Me)
                End If
                Return Me.mUIMenuStrip1MenuBar
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetTitleBar() As UISpreadsheetTitleBar
            Get
                If (Me.mUISpreadsheetTitleBar Is Nothing) Then
                    Me.mUISpreadsheetTitleBar = New UISpreadsheetTitleBar(Me)
                End If
                Return Me.mUISpreadsheetTitleBar
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIMenuStrip1MenuBar As UIMenuStrip1MenuBar
        
        Private mUISpreadsheetTitleBar As UISpreadsheetTitleBar
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIMenuStrip1MenuBar
        Inherits WinMenuBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenu.PropertyNames.Name) = "menuStrip1"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIFileMenuItem() As UIFileMenuItem
            Get
                If (Me.mUIFileMenuItem Is Nothing) Then
                    Me.mUIFileMenuItem = New UIFileMenuItem(Me)
                End If
                Return Me.mUIFileMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIFileMenuItem As UIFileMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIFileMenuItem
        Inherits WinMenuItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenuItem.PropertyNames.Name) = "File"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINewCtrlNMenuItem() As WinMenuItem
            Get
                If (Me.mUINewCtrlNMenuItem Is Nothing) Then
                    Me.mUINewCtrlNMenuItem = New WinMenuItem(Me)
                    Me.mUINewCtrlNMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "New              Ctrl+N"
                    Me.mUINewCtrlNMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUINewCtrlNMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUINewCtrlNMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINewCtrlNMenuItem As WinMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UISpreadsheetTitleBar
        Inherits WinTitleBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICloseButton() As WinButton
            Get
                If (Me.mUICloseButton Is Nothing) Then
                    Me.mUICloseButton = New WinButton(Me)
                    Me.mUICloseButton.SearchProperties(WinButton.PropertyNames.Name) = "Close"
                    Me.mUICloseButton.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICloseButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICloseButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UISpreadsheetWindow1
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Spreadsheet"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.FilterProperties(WinWindow.PropertyNames.OrderOfInvocation) = "2"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIMenuStrip1MenuBar() As UIMenuStrip1MenuBar1
            Get
                If (Me.mUIMenuStrip1MenuBar Is Nothing) Then
                    Me.mUIMenuStrip1MenuBar = New UIMenuStrip1MenuBar1(Me)
                End If
                Return Me.mUIMenuStrip1MenuBar
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetTitleBar() As UISpreadsheetTitleBar1
            Get
                If (Me.mUISpreadsheetTitleBar Is Nothing) Then
                    Me.mUISpreadsheetTitleBar = New UISpreadsheetTitleBar1(Me)
                End If
                Return Me.mUISpreadsheetTitleBar
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIMenuStrip1MenuBar As UIMenuStrip1MenuBar1
        
        Private mUISpreadsheetTitleBar As UISpreadsheetTitleBar1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIMenuStrip1MenuBar1
        Inherits WinMenuBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenu.PropertyNames.Name) = "menuStrip1"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIFileMenuItem() As UIFileMenuItem1
            Get
                If (Me.mUIFileMenuItem Is Nothing) Then
                    Me.mUIFileMenuItem = New UIFileMenuItem1(Me)
                End If
                Return Me.mUIFileMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIFileMenuItem As UIFileMenuItem1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UIFileMenuItem1
        Inherits WinMenuItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenuItem.PropertyNames.Name) = "File"
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINewCtrlNMenuItem() As WinMenuItem
            Get
                If (Me.mUINewCtrlNMenuItem Is Nothing) Then
                    Me.mUINewCtrlNMenuItem = New WinMenuItem(Me)
                    Me.mUINewCtrlNMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "New              Ctrl+N"
                    Me.mUINewCtrlNMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUINewCtrlNMenuItem.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUINewCtrlNMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINewCtrlNMenuItem As WinMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "14.0.23107.0")>  _
    Public Class UISpreadsheetTitleBar1
        Inherits WinTitleBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Spreadsheet")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICloseButton() As WinButton
            Get
                If (Me.mUICloseButton Is Nothing) Then
                    Me.mUICloseButton = New WinButton(Me)
                    Me.mUICloseButton.SearchProperties(WinButton.PropertyNames.Name) = "Close"
                    Me.mUICloseButton.WindowTitles.Add("Spreadsheet")
                End If
                Return Me.mUICloseButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICloseButton As WinButton
        #End Region
    End Class
End Namespace
