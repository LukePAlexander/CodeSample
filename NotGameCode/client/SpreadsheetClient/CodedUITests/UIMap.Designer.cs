// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenSpreadsheet
        /// </summary>
        public void OpenSpreadsheet()
        {
            #region Variable Declarations
            //WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            //WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            ApplicationUnderTest uIOpenButton = ApplicationUnderTest.Launch(
                @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe");
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            //Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(48, 28));

            // Click '&Open' button
            //Mouse.Click(uIOpenButton, new Point(34, 16));
        }
        
        /// <summary>
        /// CloseSpreadsheet
        /// </summary>
        public void CloseSpreadsheet()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 15));
        }
        
        /// <summary>
        /// EnterInformationInSheet - Use 'EnterInformationInSheetParams' to pass parameters into this method.
        /// </summary>
        public void EnterInformationInSheet()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(79, 40));

            // Type '1' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys, ModifierKeys.None);

            // Type '2' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Type '3' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys2, ModifierKeys.None);

            // Type '4' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText3;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(160, 42));

            // Type '=A1' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText4;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys4, ModifierKeys.None);

            // Type '=B1' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText5;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys5, ModifierKeys.None);

            // Type '=A1+B1+B2' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText6;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys6, ModifierKeys.None);

            // Type '=A1+B1+A2+B2+A2+B3' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText7;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys7, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 36));

            // Type '2' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText8;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(236, 39));

            // Type 'Hello World!' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText9;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(238, 58));

            // Type '=C2' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText10;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys8, ModifierKeys.None);

            // Type '=C1' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText11;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys9, ModifierKeys.None);

            // Type '=' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText12;

            // Type '=A1/0' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText13;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys10, ModifierKeys.None);

            // Type '=asdfjkl;' in text box
            uIItemEdit.Text = this.EnterInformationInSheetParams.UIItemEditText14;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.EnterInformationInSheetParams.UIItemEditSendKeys11, ModifierKeys.None);
        }
        
        /// <summary>
        /// TakesANumber - Use 'TakesANumberExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TakesANumber()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that the 'ControlType' property of text box equals '10'
            Assert.AreEqual(this.TakesANumberExpectedValues.UIItemEditControlType, uIItemEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// Add cells A1 and A2
        /// </summary>
        public void AddingTwoCells()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // The control for this action was not recorded.

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(69, 36));

            // Type '1' in text box
            uIItemEdit.Text = this.AddingTwoCellsParams.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.AddingTwoCellsParams.UIItemEditSendKeys, ModifierKeys.None);

            // Type '2' in text box
            uIItemEdit.Text = this.AddingTwoCellsParams.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.AddingTwoCellsParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Type '=A1+A2' in text box
            uIItemEdit.Text = this.AddingTwoCellsParams.UIItemEditText2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.AddingTwoCellsParams.UIItemEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// Check1
        /// </summary>
        public void Check1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(53, 39));
        }
        
        /// <summary>
        /// AssertA1 - Use 'AssertA1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA1()
        {
            #region Variable Declarations
            WinText uIValueText = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValueText;
            #endregion

            // Verify that the 'ControlType' property of 'Value:' label equals 'Value: 1'
            string a = this.AssertA1ExpectedValues.UIValueTextControlType;
            string b = uIValueText.Name;
            Assert.AreEqual(a, b, "Value in A1 was not 1");
        }
        
        /// <summary>
        /// AdvanceToA2
        /// </summary>
        public void AdvanceToA2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 59));
        }
        
        /// <summary>
        /// AssertA2 - Use 'AssertA2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA2()
        {
            #region Variable Declarations
            WinText uIValue2Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue2Text;
            #endregion

            // Verify that the 'ControlType' property of 'Value: 2' label equals 'Value: 2'
            Assert.AreEqual(this.AssertA2ExpectedValues.UIValue2TextControlType, uIValue2Text.Name, "Value in A2 was not 2");
        }
        
        /// <summary>
        /// AdvanceToA3
        /// </summary>
        public void AdvanceToA3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(60, 81));
        }
        
        /// <summary>
        /// AssertA3 - Use 'AssertA3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA3()
        {
            #region Variable Declarations
            WinText uIValue3Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue3Text;
            #endregion

            // Verify that the 'ControlType' property of 'Value: 3' label equals 'Value: 3'
            Assert.AreEqual(this.AssertA3ExpectedValues.UIValue3TextControlType, uIValue3Text.Name, "Formula in A3 did not evaluate to 3");
        }
        
        /// <summary>
        /// ImproveFormulaInA3 - Use 'ImproveFormulaInA3Params' to pass parameters into this method.
        /// </summary>
        public void ImproveFormulaInA3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(67, 43));

            // Type '2' in text box
            uIItemEdit.Text = this.ImproveFormulaInA3Params.UIItemEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(132, 41));

            // Type '=A1-2' in text box
            uIItemEdit.Text = this.ImproveFormulaInA3Params.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ImproveFormulaInA3Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 82));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 80));

            // Type '=(A1+B1)/A2' in text box
            uIItemEdit.Text = this.ImproveFormulaInA3Params.UIItemEditText2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ImproveFormulaInA3Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(48, 83));
        }
        
        /// <summary>
        /// AssertA3ImprovedFormula - Use 'AssertA3ImprovedFormulaExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertA3ImprovedFormula()
        {
            #region Variable Declarations
            WinText uIValue11Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue11Text;
            #endregion

            // Verify that the 'ControlType' property of 'Value: 11' label equals 'Value: 11'
            Assert.AreEqual(this.AssertA3ImprovedFormulaExpectedValues.UIValue11TextControlType, uIValue11Text.Name, "Improved formula did not return 11");
        }
        
        /// <summary>
        /// Test saving and opening a file
        /// </summary>
        public void SaveAndOpenTests()
        {
            #region Variable Declarations
            //WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UISpreadsheetGUIListItem.UINameEdit;
            ApplicationUnderTest uINameEdit = ApplicationUnderTest.Launch(
                @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe");
            WinMenuItem uISaveCtrlSMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveCtrlSMenuItem;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(78, 13));

            // Click 'File' -> 'Save Ctrl+S' menu item
            Mouse.Click(uISaveCtrlSMenuItem, new Point(46, 14));
        }
        
        /// <summary>
        /// AssertSaveDialog - Use 'AssertSaveDialogExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSaveDialog()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISaveSpreadsheetAsWindow.UICancelWindow.UICancelButton;
            WinButton uISaveButton = this.UISaveSpreadsheetAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Verify that the 'ControlType' property of 'Cancel' button equals 'Cancel'
            Assert.AreEqual(this.AssertSaveDialogExpectedValues.UICancelButtonControlType, uICancelButton.Name);

            // Verify that the 'ControlType' property of '&Save' button equals 'Save'
            Assert.AreEqual(this.AssertSaveDialogExpectedValues.UISaveButtonControlType, uISaveButton.Name, "The dialog was not a save dialog");
        }
        
        /// <summary>
        /// SaveAndOpenInNewWindow - Use 'SaveAndOpenInNewWindowParams' to pass parameters into this method.
        /// </summary>
        public void SaveAndOpenInNewWindow()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISaveSpreadsheetAsWindow.UICancelWindow.UICancelButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            WinComboBox uIFilenameComboBox = this.UISaveSpreadsheetAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveSpreadsheetAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uINewCtrlNMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewCtrlNMenuItem;
            WinMenuItem uIOpenCtrlOMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenCtrlOMenuItem;
            WinEdit uINameEdit = this.UIOpenSpreadsheetWindow.UIItemWindow.UISaveTestsprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenSpreadsheetWindow.UIOpenWindow.UIOpenButton;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(50, 18));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 40));

            // Type '' in text box
            ThingsToSave();

            // Type 'Control + s' in text box
            Keyboard.SendKeys(uIItemEdit, this.SaveAndOpenInNewWindowParams.UIItemEditSendKeys, ModifierKeys.Control);

            // Select 'SaveTest' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndOpenInNewWindowParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(40, 14));

            // Click 'File' -> 'New Ctrl+N' menu item
            Mouse.Click(uINewCtrlNMenuItem, new Point(49, 6));

            // Click 'File' -> 'Open Ctrl+O' menu item
            Mouse.Click(uIOpenCtrlOMenuItem, new Point(29, 16));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(38, 19));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(37, 18));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(207, 41));
        }
        
        /// <summary>
        /// ThingsToSave - Use 'ThingsToSaveParams' to pass parameters into this method.
        /// </summary>
        public void ThingsToSave()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(59, 37));

            // Type '' in text box
            uIItemEdit.Text = this.ThingsToSaveParams.UIItemEditText;

            // Type '{Right}{Up}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ThingsToSaveParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(131, 42));

            // Type 'The Answer' in text box
            uIItemEdit.Text = this.ThingsToSaveParams.UIItemEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(169, 46));

            // Type '42' in text box
            uIItemEdit.Text = this.ThingsToSaveParams.UIItemEditText2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.ThingsToSaveParams.UIItemEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// TestOpenedFileAnswer - Use 'TestOpenedFileAnswerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestOpenedFileAnswer()
        {
            #region Variable Declarations
            WinText uIValue42Text = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValue42Text;
            #endregion

            // Click 'spreadsheetPanel1' client
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            Mouse.Click(uISpreadsheetPanel1Client, new Point(169, 46));

            // Verify that the 'ControlType' property of 'Value: 42' label equals 'Value: 42'
            Assert.AreEqual(this.TestOpenedFileAnswerExpectedValues.UIValue42TextControlType, uIValue42Text.Name, "This was not the answer");
        }
        
        /// <summary>
        /// MoveToA1
        /// </summary>
        public void MoveToA1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(50, 34));
        }
        
        /// <summary>
        /// AssertGreeting - Use 'AssertGreetingExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertGreeting()
        {
            #region Variable Declarations
            WinText uIValueHelloWorldText = this.UISpreadsheetWindow.UIToolStrip1ToolBar.UIValueHelloWorldText;
            #endregion

            // Verify that the 'ControlType' property of 'Value: Hello World!' label equals 'Value: Hello World!'
            Assert.AreEqual(this.AssertGreetingExpectedValues.UIValueHelloWorldTextControlType, uIValueHelloWorldText.Name, "This was supposed to be a greeting!");
        }
        
        #region Properties
        public virtual EnterInformationInSheetParams EnterInformationInSheetParams
        {
            get
            {
                if ((this.mEnterInformationInSheetParams == null))
                {
                    this.mEnterInformationInSheetParams = new EnterInformationInSheetParams();
                }
                return this.mEnterInformationInSheetParams;
            }
        }
        
        public virtual TakesANumberExpectedValues TakesANumberExpectedValues
        {
            get
            {
                if ((this.mTakesANumberExpectedValues == null))
                {
                    this.mTakesANumberExpectedValues = new TakesANumberExpectedValues();
                }
                return this.mTakesANumberExpectedValues;
            }
        }
        
        public virtual AddingTwoCellsParams AddingTwoCellsParams
        {
            get
            {
                if ((this.mAddingTwoCellsParams == null))
                {
                    this.mAddingTwoCellsParams = new AddingTwoCellsParams();
                }
                return this.mAddingTwoCellsParams;
            }
        }
        
        public virtual AssertA1ExpectedValues AssertA1ExpectedValues
        {
            get
            {
                if ((this.mAssertA1ExpectedValues == null))
                {
                    this.mAssertA1ExpectedValues = new AssertA1ExpectedValues();
                }
                return this.mAssertA1ExpectedValues;
            }
        }
        
        public virtual AssertA2ExpectedValues AssertA2ExpectedValues
        {
            get
            {
                if ((this.mAssertA2ExpectedValues == null))
                {
                    this.mAssertA2ExpectedValues = new AssertA2ExpectedValues();
                }
                return this.mAssertA2ExpectedValues;
            }
        }
        
        public virtual AssertA3ExpectedValues AssertA3ExpectedValues
        {
            get
            {
                if ((this.mAssertA3ExpectedValues == null))
                {
                    this.mAssertA3ExpectedValues = new AssertA3ExpectedValues();
                }
                return this.mAssertA3ExpectedValues;
            }
        }
        
        public virtual ImproveFormulaInA3Params ImproveFormulaInA3Params
        {
            get
            {
                if ((this.mImproveFormulaInA3Params == null))
                {
                    this.mImproveFormulaInA3Params = new ImproveFormulaInA3Params();
                }
                return this.mImproveFormulaInA3Params;
            }
        }
        
        public virtual AssertA3ImprovedFormulaExpectedValues AssertA3ImprovedFormulaExpectedValues
        {
            get
            {
                if ((this.mAssertA3ImprovedFormulaExpectedValues == null))
                {
                    this.mAssertA3ImprovedFormulaExpectedValues = new AssertA3ImprovedFormulaExpectedValues();
                }
                return this.mAssertA3ImprovedFormulaExpectedValues;
            }
        }
        
        public virtual AssertSaveDialogExpectedValues AssertSaveDialogExpectedValues
        {
            get
            {
                if ((this.mAssertSaveDialogExpectedValues == null))
                {
                    this.mAssertSaveDialogExpectedValues = new AssertSaveDialogExpectedValues();
                }
                return this.mAssertSaveDialogExpectedValues;
            }
        }
        
        public virtual SaveAndOpenInNewWindowParams SaveAndOpenInNewWindowParams
        {
            get
            {
                if ((this.mSaveAndOpenInNewWindowParams == null))
                {
                    this.mSaveAndOpenInNewWindowParams = new SaveAndOpenInNewWindowParams();
                }
                return this.mSaveAndOpenInNewWindowParams;
            }
        }
        
        public virtual ThingsToSaveParams ThingsToSaveParams
        {
            get
            {
                if ((this.mThingsToSaveParams == null))
                {
                    this.mThingsToSaveParams = new ThingsToSaveParams();
                }
                return this.mThingsToSaveParams;
            }
        }
        
        public virtual TestOpenedFileAnswerExpectedValues TestOpenedFileAnswerExpectedValues
        {
            get
            {
                if ((this.mTestOpenedFileAnswerExpectedValues == null))
                {
                    this.mTestOpenedFileAnswerExpectedValues = new TestOpenedFileAnswerExpectedValues();
                }
                return this.mTestOpenedFileAnswerExpectedValues;
            }
        }
        
        public virtual AssertGreetingExpectedValues AssertGreetingExpectedValues
        {
            get
            {
                if ((this.mAssertGreetingExpectedValues == null))
                {
                    this.mAssertGreetingExpectedValues = new AssertGreetingExpectedValues();
                }
                return this.mAssertGreetingExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UISaveSpreadsheetAsWindow UISaveSpreadsheetAsWindow
        {
            get
            {
                if ((this.mUISaveSpreadsheetAsWindow == null))
                {
                    this.mUISaveSpreadsheetAsWindow = new UISaveSpreadsheetAsWindow();
                }
                return this.mUISaveSpreadsheetAsWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UIOpenSpreadsheetWindow UIOpenSpreadsheetWindow
        {
            get
            {
                if ((this.mUIOpenSpreadsheetWindow == null))
                {
                    this.mUIOpenSpreadsheetWindow = new UIOpenSpreadsheetWindow();
                }
                return this.mUIOpenSpreadsheetWindow;
            }
        }
        #endregion
        
        #region Fields
        private EnterInformationInSheetParams mEnterInformationInSheetParams;
        
        private TakesANumberExpectedValues mTakesANumberExpectedValues;
        
        private AddingTwoCellsParams mAddingTwoCellsParams;
        
        private AssertA1ExpectedValues mAssertA1ExpectedValues;
        
        private AssertA2ExpectedValues mAssertA2ExpectedValues;
        
        private AssertA3ExpectedValues mAssertA3ExpectedValues;
        
        private ImproveFormulaInA3Params mImproveFormulaInA3Params;
        
        private AssertA3ImprovedFormulaExpectedValues mAssertA3ImprovedFormulaExpectedValues;
        
        private AssertSaveDialogExpectedValues mAssertSaveDialogExpectedValues;
        
        private SaveAndOpenInNewWindowParams mSaveAndOpenInNewWindowParams;
        
        private ThingsToSaveParams mThingsToSaveParams;
        
        private TestOpenedFileAnswerExpectedValues mTestOpenedFileAnswerExpectedValues;
        
        private AssertGreetingExpectedValues mAssertGreetingExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UISaveSpreadsheetAsWindow mUISaveSpreadsheetAsWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UIOpenSpreadsheetWindow mUIOpenSpreadsheetWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterInformationInSheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterInformationInSheetParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in text box
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in text box
        /// </summary>
        public string UIItemEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '4' in text box
        /// </summary>
        public string UIItemEditText3 = "4";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in text box
        /// </summary>
        public string UIItemEditText4 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '=B1' in text box
        /// </summary>
        public string UIItemEditText5 = "=B1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1+B2' in text box
        /// </summary>
        public string UIItemEditText6 = "=A1+B1+B2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1+A2+B2+A2+B3' in text box
        /// </summary>
        public string UIItemEditText7 = "=A1+B1+A2+B2+A2+B3";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys7 = "{Enter}";
        
        /// <summary>
        /// Type '2' in text box
        /// </summary>
        public string UIItemEditText8 = "2";
        
        /// <summary>
        /// Type 'Hello World!' in text box
        /// </summary>
        public string UIItemEditText9 = "Hello World!";
        
        /// <summary>
        /// Type '=C2' in text box
        /// </summary>
        public string UIItemEditText10 = "=C2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys8 = "{Enter}";
        
        /// <summary>
        /// Type '=C1' in text box
        /// </summary>
        public string UIItemEditText11 = "=C1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys9 = "{Enter}";
        
        /// <summary>
        /// Type '=' in text box
        /// </summary>
        public string UIItemEditText12 = "=";
        
        /// <summary>
        /// Type '=A1/0' in text box
        /// </summary>
        public string UIItemEditText13 = "=A1/0";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys10 = "{Enter}";
        
        /// <summary>
        /// Type '=asdfjkl;' in text box
        /// </summary>
        public string UIItemEditText14 = "=asdfjkl;";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys11 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TakesANumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TakesANumberExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of text box equals '10'
        /// </summary>
        public string UIItemEditControlType = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddingTwoCells'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddingTwoCellsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in text box
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2' in text box
        /// </summary>
        public string UIItemEditText2 = "=A1+A2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertA1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value:' label equals 'Value: 1'
        /// </summary>
        public string UIValueTextControlType = "Value: 1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertA2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value: 2' label equals 'Value: 2'
        /// </summary>
        public string UIValue2TextControlType = "Value: 2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertA3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value: 3' label equals 'Value: 3'
        /// </summary>
        public string UIValue3TextControlType = "Value: 3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ImproveFormulaInA3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ImproveFormulaInA3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in text box
        /// </summary>
        public string UIItemEditText = "2";
        
        /// <summary>
        /// Type '=A1-2' in text box
        /// </summary>
        public string UIItemEditText1 = "=A1-2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=(A1+B1)/A2' in text box
        /// </summary>
        public string UIItemEditText2 = "=(A1+B1)/A2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA3ImprovedFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertA3ImprovedFormulaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value: 11' label equals 'Value: 11'
        /// </summary>
        public string UIValue11TextControlType = "Value: 11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSaveDialog'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSaveDialogExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Cancel' button equals 'Cancel'
        /// </summary>
        public string UICancelButtonControlType = "Cancel";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '&Save' button equals 'Save'
        /// </summary>
        public string UISaveButtonControlType = "Save";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenInNewWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveAndOpenInNewWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in text box
        /// </summary>
        public string UIItemEditText = "";
        
        /// <summary>
        /// Type 'Control + s' in text box
        /// </summary>
        public string UIItemEditSendKeys = "s";
        
        /// <summary>
        /// Select 'SaveTest' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "SaveTest";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ThingsToSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ThingsToSaveParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in text box
        /// </summary>
        public string UIItemEditText = "Hello World!";
        
        /// <summary>
        /// Type '{Right}{Up}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Right}{Up}";
        
        /// <summary>
        /// Type 'The Answer' in text box
        /// </summary>
        public string UIItemEditText1 = "The Answer";
        
        /// <summary>
        /// Type '42' in text box
        /// </summary>
        public string UIItemEditText2 = "42";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestOpenedFileAnswer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestOpenedFileAnswerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value: 42' label equals 'Value: 42'
        /// </summary>
        public string UIValue42TextControlType = "Value: 42";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertGreeting'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertGreetingExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Value: Hello World!' label equals 'Value: Hello World!'
        /// </summary>
        public string UIValueHelloWorldTextControlType = "Value: Hello World!";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIToolStrip1ToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIToolStrip1ToolBar mUIToolStrip1ToolBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolStrip1ToolBar : WinToolBar
    {
        
        public UIToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIValueText
        {
            get
            {
                if ((this.mUIValueText == null))
                {
                    this.mUIValueText = new WinText(this);
                    #region Search Criteria
                    this.mUIValueText.SearchProperties[WinText.PropertyNames.Name] = "Value: ";
                    this.mUIValueText.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueText;
            }
        }
        
        public WinText UIValue2Text
        {
            get
            {
                if ((this.mUIValue2Text == null))
                {
                    this.mUIValue2Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue2Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 2";
                    this.mUIValue2Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue2Text;
            }
        }
        
        public WinText UIValue3Text
        {
            get
            {
                if ((this.mUIValue3Text == null))
                {
                    this.mUIValue3Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue3Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 3";
                    this.mUIValue3Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue3Text;
            }
        }
        
        public WinText UIValue11Text
        {
            get
            {
                if ((this.mUIValue11Text == null))
                {
                    this.mUIValue11Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue11Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 11";
                    this.mUIValue11Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue11Text;
            }
        }
        
        public WinText UIValue42Text
        {
            get
            {
                if ((this.mUIValue42Text == null))
                {
                    this.mUIValue42Text = new WinText(this);
                    #region Search Criteria
                    this.mUIValue42Text.SearchProperties[WinText.PropertyNames.Name] = "Value: 42";
                    this.mUIValue42Text.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValue42Text;
            }
        }
        
        public WinText UIValueHelloWorldText
        {
            get
            {
                if ((this.mUIValueHelloWorldText == null))
                {
                    this.mUIValueHelloWorldText = new WinText(this);
                    #region Search Criteria
                    this.mUIValueHelloWorldText.SearchProperties[WinText.PropertyNames.Name] = "Value: Hello World!";
                    this.mUIValueHelloWorldText.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueHelloWorldText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIValueText;
        
        private WinText mUIValue2Text;
        
        private WinText mUIValue3Text;
        
        private WinText mUIValue11Text;
        
        private WinText mUIValue42Text;
        
        private WinText mUIValueHelloWorldText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveCtrlSMenuItem
        {
            get
            {
                if ((this.mUISaveCtrlSMenuItem == null))
                {
                    this.mUISaveCtrlSMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveCtrlSMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save              Ctrl+S";
                    this.mUISaveCtrlSMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveCtrlSMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveCtrlSMenuItem;
            }
        }
        
        public WinMenuItem UINewCtrlNMenuItem
        {
            get
            {
                if ((this.mUINewCtrlNMenuItem == null))
                {
                    this.mUINewCtrlNMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewCtrlNMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New              Ctrl+N";
                    this.mUINewCtrlNMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewCtrlNMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewCtrlNMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveCtrlSMenuItem;
        
        private WinMenuItem mUINewCtrlNMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGUIListItem UISpreadsheetGUIListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIListItem == null))
                {
                    this.mUISpreadsheetGUIListItem = new UISpreadsheetGUIListItem(this);
                }
                return this.mUISpreadsheetGUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGUIListItem mUISpreadsheetGUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetGUIListItem : WinListItem
    {
        
        public UISpreadsheetGUIListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveSpreadsheetAsWindow : WinWindow
    {
        
        public UISaveSpreadsheetAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Spreadsheet As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Spreadsheet As");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save Spreadsheet As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save Spreadsheet As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save Spreadsheet As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save Spreadsheet As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save Spreadsheet As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save Spreadsheet As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenCtrlOMenuItem
        {
            get
            {
                if ((this.mUIOpenCtrlOMenuItem == null))
                {
                    this.mUIOpenCtrlOMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenCtrlOMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open            Ctrl+O";
                    this.mUIOpenCtrlOMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenCtrlOMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenCtrlOMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenCtrlOMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenSpreadsheetWindow : WinWindow
    {
        
        public UIOpenSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISaveTestsprdListItem UISaveTestsprdListItem
        {
            get
            {
                if ((this.mUISaveTestsprdListItem == null))
                {
                    this.mUISaveTestsprdListItem = new UISaveTestsprdListItem(this);
                }
                return this.mUISaveTestsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISaveTestsprdListItem mUISaveTestsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveTestsprdListItem : WinListItem
    {
        
        public UISaveTestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SaveTest.sprd";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open Spreadsheet");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
}
